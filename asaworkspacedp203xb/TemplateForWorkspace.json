{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "asaworkspacedp203xb"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"Oracle1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle1'"
		},
		"asacosmosdb01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asacosmosdb01'"
		},
		"asadatalakedp203xb_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'asadatalakedp203xb'"
		},
		"asastoredp203xb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asastoredp203xb'"
		},
		"asaworkspacedp203xb-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asaworkspacedp203xb-WorkspaceDefaultSqlServer'"
		},
		"orcaleAzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'orcaleAzureSynapseAnalytics1'"
		},
		"sqlpool01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01'"
		},
		"sqlpool01_highperf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_highperf'"
		},
		"sqlpool01_workload01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload01'"
		},
		"sqlpool01_workload02_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlpool01_workload02'"
		},
		"asadatalakedp203xb_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakedp203xb.dfs.core.windows.net"
		},
		"asakeyvaultdp203xb_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://asakeyvaultdp203xb.vault.azure.net/"
		},
		"asaworkspacedp203xb-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asadatalakedp203xb.dfs.core.windows.net"
		},
		"sqlpool01_import01_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "SqlPassword"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Cosmos DB Container')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CosmosDbSqlApiSource",
								"preferredRegions": []
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "asal400_customerprofile_cosmosdb",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "cosmos_db_htap",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-09-05T06:59:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_customerprofile_cosmosdb')]",
				"[concat(variables('workspaceId'), '/datasets/cosmos_db_htap')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopyData_from_Oracle_to_SynpaseAnalytics')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Copy data from Oracle server to Azure Synapse Analytics.\n\n\nYou can also go to \"Copy Data Tool\" to get the pipeline for more connectors and scenarios.",
				"activities": [
					{
						"name": "Oracle_to_SynapseAnalytics",
						"description": "Copy data from Oracle server to Azure Synapse Analytics",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBatchSize": 10000,
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "asadatalakedp203xb",
									"type": "LinkedServiceReference"
								}
							},
							"enableSkipIncompatibleRow": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DataSourceStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataDestinationStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-09-05T07:20:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DataSourceStore')]",
				"[concat(variables('workspaceId'), '/datasets/DataDestinationStore')]",
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakedp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Generic SCD Type1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "https://techcommunity.microsoft.com/t5/Azure-Data-Factory/Create-Generic-SCD-Pattern-in-ADF-Mapping-Data-Flows/ba-p/918519",
				"activities": [
					{
						"name": "SCD Type1 Generic",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scdT1Generic",
								"type": "DataFlowReference",
								"parameters": {
									"dimname": "'dimprods'",
									"keycol": "'ProductNumber'",
									"SurrogateKey": "'ProductID'",
									"tablename": "'DimProducts'"
								},
								"datasetParameters": {
									"NewMembers1": {
										"filename": "DimProducts.csv"
									},
									"ExistingMembers": {
										"tablename": "DimProducts"
									},
									"SetMaxKey": {
										"tablename": "DimProducts"
									},
									"sink1": {
										"tablename": "DimProducts"
									},
									"sink2": {
										"tablename": "DimProducts"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-09-05T07:25:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/scdT1Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/User Profiles to Datalake')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "user_profiles_to_datalake",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "user_profiles_to_datalake",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcommerceUserProfiles": {},
									"UserProfiles": {},
									"DataLake": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Calculate Top 5 Products",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "user_profiles_to_datalake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Calculate Top 5 Products",
								"type": "NotebookReference"
							},
							"parameters": {
								"runId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-09-04T07:23:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/user_profiles_to_datalake')]",
				"[concat(variables('workspaceId'), '/notebooks/Calculate Top 5 Products')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cosmos  ProductReviews')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "cosmos Notebook 1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "cosmos Notebook 1",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-09-05T06:59:43Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/cosmos Notebook 1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BlobInputFolder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asastoredp203xb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "DimProducts.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "SampleData/AW",
						"container": "mycontainer"
					},
					"columnDelimiter": "|",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asastoredp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataDestinationStore')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your Azure Synapse Analytics.",
				"linkedServiceName": {
					"referenceName": "orcaleAzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": "test"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/orcaleAzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataSourceStore')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to your Oracle server.",
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"typeProperties": {
					"tableName": "test"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParameterTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string",
						"defaultValue": "DimProducts"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_customerprofile_cosmosdb')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"userId": {
							"type": "integer"
						},
						"cartId": {
							"type": "string"
						},
						"preferredProducts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"productReviews": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"reviewText": {
										"type": "string"
									},
									"reviewDate": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "OnlineUserProfile01"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_december_sales')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakedp203xb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sale-20161230-snappy.parquet",
						"folderPath": "campaign-analytics",
						"fileSystem": "wwi-02"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "TransactionId",
						"type": "UTF8"
					},
					{
						"name": "CustomerId",
						"type": "INT32"
					},
					{
						"name": "ProductId",
						"type": "INT_16"
					},
					{
						"name": "Quantity",
						"type": "INT_8"
					},
					{
						"name": "Price",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "TransactionDate",
						"type": "INT32"
					},
					{
						"name": "ProfitAmount",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "Hour",
						"type": "INT_8"
					},
					{
						"name": "Minute",
						"type": "INT_8"
					},
					{
						"name": "StoreId",
						"type": "INT_16"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakedp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asal400_ecommerce_userprofiles_source')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asadatalakedp203xb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "online-user-profiles-02",
						"fileSystem": "wwi-02"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"visitorId": {
							"type": "integer"
						},
						"topProductPurchases": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"productId": {
										"type": "integer"
									},
									"itemsPurchasedLast12Months": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakedp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cosmos_db_htap')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asacosmosdb01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {},
				"typeProperties": {
					"collectionName": "UserProfileHTAP"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asacosmosdb01')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Oracle1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asacosmosdb01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('asacosmosdb01_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asadatalakedp203xb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asadatalakedp203xb_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('asadatalakedp203xb_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asakeyvaultdp203xb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('asakeyvaultdp203xb_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asastoredp203xb')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('asastoredp203xb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspacedp203xb-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asaworkspacedp203xb-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asaworkspacedp203xb-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asaworkspacedp203xb-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/handson_powerbi')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "synapse-training",
					"tenantID": "aebd532b-ffab-4aca-9a23-620370090cc8"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/orcaleAzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('orcaleAzureSynapseAnalytics1_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultdp203xb",
							"type": "LinkedServiceReference"
						},
						"secretName": "te"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultdp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultdp203xb",
							"type": "LinkedServiceReference"
						},
						"secretName": "SqlPassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultdp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_highperf')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_highperf_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultdp203xb",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultdp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_import01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultdp203xb",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('sqlpool01_import01_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultdp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload01')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultdp203xb",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultdp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlpool01_workload02')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqlpool01_workload02_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "asakeyvaultdp203xb",
							"type": "LinkedServiceReference"
						},
						"secretName": "SQL-USER-ASA"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asakeyvaultdp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cosmos ProductReviewsTrigger 1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "cosmos  ProductReviews",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-09-05T20:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/cosmos  ProductReviews')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cosmosdbHTAP')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Copy Cosmos DB Container",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-09-05T21:34:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Copy Cosmos DB Container')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/top5productsTrigger 1')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "User Profiles to Datalake",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-09-05T21:55:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/User Profiles to Datalake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureIntegrationRuntime01')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 60
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/scdT1Generic')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is a generalized Slowly Changing Dimension Type 1 that is parameterized to work against different dimension tables and dimension types.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "BlobInputFolder",
								"type": "DatasetReference"
							},
							"name": "NewMembers1"
						},
						{
							"dataset": {
								"referenceName": "ParameterTable",
								"type": "DatasetReference"
							},
							"name": "ExistingMembers"
						},
						{
							"dataset": {
								"referenceName": "ParameterTable",
								"type": "DatasetReference"
							},
							"name": "SetMaxKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParameterTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ParameterTable",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "PickCols1"
						},
						{
							"name": "PickCols2"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "checkMatch"
						},
						{
							"name": "UpdateSetAttrs"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "isMatching"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "InsertSetAttrs"
						},
						{
							"name": "Join1"
						},
						{
							"name": "SetCols"
						}
					],
					"script": "parameters{\n\tdimname as string ('dimprods'),\n\tkeycol as string ('ProductNumber'),\n\tSurrogateKey as string ('ProductID'),\n\ttablename as string ('DimProducts')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> NewMembers1\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingMembers\nsource(output(\n\t\tmaxsk as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: (concat('select max(',$SurrogateKey,') as maxsk from ',$tablename)),\n\tformat: 'query') ~> SetMaxKey\nNewMembers1 derive(businesskey1 = toString(byPosition(2)),\n\t\tname1 = toString(byPosition(6))) ~> PickCols1\nExistingMembers derive(each(match(instr(name,'ID')>0), 'surrogatekey2' = toInteger($$)),\n\t\teach(match(instr(name,'Number')>0), 'businesskey2' = toString($$))) ~> PickCols2\nPickCols1, MapDrifted1 lookup(businesskey1 == businesskey2,\n\tmultiple: true,\n\tbroadcast: 'auto')~> Lookup1\nisMatching split(match,\n\tdisjoint: false) ~> checkMatch@(isMatch, noMatch)\ncheckMatch@isMatch derive({_LastUpdated} = currentTimestamp(),\n\t\tDWhash = sha2(256,name1)) ~> UpdateSetAttrs\nPickCols2 derive(ProductID = toInteger(byName('ProductID')),\n\t\tName = toString(byName('Name')),\n\t\tProductNumber = toString(byName('ProductNumber')),\n\t\tColor = toString(byName('Color')),\n\t\tStandardCost = toDecimal(byName('StandardCost')),\n\t\tListPrice = toDecimal(byName('ListPrice')),\n\t\t{_Inserted} = toTimestamp(byName('_Inserted')),\n\t\t{_LastUpdated} = toTimestamp(byName('_LastUpdated')),\n\t\tDWhash = toString(byName('DWhash')),\n\t\tsurrogatekey2 = toInteger(byName('surrogatekey2')),\n\t\tbusinesskey2 = toString(byName('businesskey2'))) ~> MapDrifted1\nLookup1 derive(match = isMatch()) ~> isMatching\nUpdateSetAttrs alterRow(updateIf(true())) ~> AlterRow1\ncheckMatch@noMatch keyGenerate(output(surrogatekey2 as long),\n\tstartAt: 1L) ~> SurrogateKey1\nJoin1 derive(surrogatekey2 = surrogatekey2 + maxsk,\n\t\t{_LastUpdated} = currentTimestamp(),\n\t\t{_Inserted} = currentTimestamp(),\n\t\tDWhash = sha2(256,name1)) ~> InsertSetAttrs\nSurrogateKey1, SetMaxKey join(true(),\n\tjoinType:'cross',\n\tbroadcast: 'auto')~> Join1\nInsertSetAttrs select(mapColumn(\n\t\tName = name1,\n\t\t{_Inserted},\n\t\t{_LastUpdated},\n\t\teach(match(name=='surrogatekey2'),\n\t\t\t$SurrogateKey+'' = $$),\n\t\teach(match(name=='businesskey1'),\n\t\t\t$keycol+'' = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SetCols\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[($keycol)],\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\teach(patternMatch(`.*[^_]$`))\n\t),\n\tpartitionBy('hash', 1)) ~> sink1\nSetCols sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/BlobInputFolder')]",
				"[concat(variables('workspaceId'), '/datasets/ParameterTable')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/user_profiles_to_datalake')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "asal400_ecommerce_userprofiles_source",
								"type": "DatasetReference"
							},
							"name": "EcommerceUserProfiles"
						},
						{
							"dataset": {
								"referenceName": "asal400_customerprofile_cosmosdb",
								"type": "DatasetReference"
							},
							"name": "UserProfiles"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "asadatalakedp203xb",
								"type": "LinkedServiceReference"
							},
							"name": "DataLake"
						}
					],
					"transformations": [
						{
							"name": "userId"
						},
						{
							"name": "UserTopProducts"
						},
						{
							"name": "DerivedProductColumns"
						},
						{
							"name": "UserPreferredProducts"
						},
						{
							"name": "JoinTopProductsWithPreferredProducts"
						},
						{
							"name": "DerivedColumnsForMerge"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tvisitorId as string,\n\t\ttopProductPurchases as (productId as string, itemsPurchasedLast12Months as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'arrayOfDocuments',\n\twildcardPaths:['online-user-profiles-02/*.json']) ~> EcommerceUserProfiles\nsource(output(\n\t\tcartId as string,\n\t\tpreferredProducts as integer[],\n\t\tproductReviews as (productId as integer, reviewDate as string, reviewText as string)[],\n\t\tuserId as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document') ~> UserProfiles\nEcommerceUserProfiles derive(visitorId = toInteger(visitorId)) ~> userId\nuserId foldDown(unroll(topProductPurchases),\n\tmapColumn(\n\t\tvisitorId,\n\t\tproductId = topProductPurchases.productId,\n\t\titemsPurchasedLast12Months = topProductPurchases.itemsPurchasedLast12Months\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserTopProducts\nUserTopProducts derive(productId = toInteger(productId),\n\t\titemsPurchasedLast12Months = toInteger(itemsPurchasedLast12Months)) ~> DerivedProductColumns\nUserProfiles foldDown(unroll(preferredProducts),\n\tmapColumn(\n\t\tpreferredProductId = preferredProducts,\n\t\tuserId\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> UserPreferredProducts\nDerivedProductColumns, UserPreferredProducts join(visitorId == userId,\n\tjoinType:'outer',\n\tpartitionBy('hash', 30,\n\t\tproductId\n\t),\n\tbroadcast: 'left')~> JoinTopProductsWithPreferredProducts\nJoinTopProductsWithPreferredProducts derive(isTopProduct = toBoolean(iif(isNull(productId), 'false', 'true')),\n\t\tisPreferredProduct = toBoolean(iif(isNull(preferredProductId), 'false', 'true')),\n\t\tproductId = iif(isNull(productId), preferredProductId, productId),\n\t\tuserId = iif(isNull(userId), visitorId, userId)) ~> DerivedColumnsForMerge\nDerivedColumnsForMerge filter(!isNull(productId)) ~> Filter1\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Fastest',\n\tfileSystem: 'wwi-02',\n\tfolderPath: 'top-products',\n\ttruncate:true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tvisitorId,\n\t\tproductId,\n\t\titemsPurchasedLast12Months,\n\t\tpreferredProductId,\n\t\tuserId,\n\t\tisTopProduct,\n\t\tisPreferredProduct\n\t)) ~> DataLake"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asal400_ecommerce_userprofiles_source')]",
				"[concat(variables('workspaceId'), '/datasets/asal400_customerprofile_cosmosdb')]",
				"[concat(variables('workspaceId'), '/linkedServices/asadatalakedp203xb')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Activity 03 - Data Warehouse Optimization')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\r\n    FS.CustomerID\r\n    ,MIN(FS.Quantity) as MinQuantity\r\n    ,MAX(FS.Quantity) as MaxQuantity\r\n    ,AVG(FS.Price) as AvgPrice\r\n    ,AVG(FS.TotalAmount) as AvgTotalAmount\r\n    ,AVG(FS.ProfitAmount) as AvgProfitAmount\r\n    ,COUNT(DISTINCT FS.StoreId) as DistinctStores\r\nFROM\r\n    wwi_perf.Sale_Heap FS\r\nGROUP BY\r\n    FS.CustomerId",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 01 02')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT [country_code]\n    ,[country_name]\n    ,[year]\n    ,[population]\nFROM [dbo].[population]\nWHERE [year] = 2019 and population > 100000000\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 01 03')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE VIEW CustomerInfo AS\n    SELECT * \nFROM OPENROWSET(\n        BULK 'https://asadatalakedp203xb.dfs.core.windows.net/wwi-02/customer-info/customerinfo.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        FIRSTROW=2\n    )\nWITH (\n    [UserName] VARCHAR (50),\n    [Gender] VARCHAR (10),\n    [Phone] VARCHAR (50),\n    [Email] VARCHAR (100),\n    [CreditCard] VARCHAR (50)\n) AS [r];\nGO\n\nSELECT * FROM CustomerInfo;\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 01 04')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakedp203xb.dfs.core.windows.net/wwi-02/sale-poc/sale-20170501.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        FIRSTROW = 2\n    ) WITH (\n        [TransactionId] varchar(50),\n        [CustomerId] int,\n        [ProductId] int,\n        [Quantity] int,\n        [Price] decimal(10,3),\n        [TotalAmount] decimal(10,3),\n        [TransactionDate] varchar(8),\n        [ProfitAmount] decimal(10,3),\n        [Hour] int,\n        [Minute] int,\n        [StoreId] int\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 01')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nSELECT\n    COUNT(*)\nFROM\n    OPENROWSET(\n        BULK 'https://asadatalakedp203xb.dfs.core.windows.net/wwi-02/sale-small/Year=2019/*/*/*/*',\n        FORMAT='PARQUET'\n    ) AS [r];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Column Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    /*  Column-level security feature in Azure Synapse simplifies the design and coding of security in application.\r\n        It ensures column level security by restricting column access to protect sensitive data. */\r\n\r\n    /* Scenario: In this scenario we will be working with two users. The first one is the CEO, he has access to all\r\n        data. The second one is DataAnalystMiami, this user doesn't have access to the confidential Revenue column\r\n        in the Sales table. Follow this lab, one step at a time to see how Column-level security removes access to the\r\n        Revenue column to DataAnalystMiami */\r\n\r\n    --Step 1: Let us see how this feature in Azure Synapse works. Before that let us have a look at the Campaign table.\r\n    select  Top 100 * from wwi_Security.Sale\r\n    where City is not null and state is not null\r\n\r\n    /*  Consider a scenario where there are two users.\r\n        A CEO, who is an authorized  personnel with access to all the information in the database\r\n        and a Data Analyst, to whom only required information should be presented.*/\r\n\r\n    -- Step:2 Verify the existence of the 'CEO' and 'DataAnalystMiami' users in the Datawarehouse.\r\n    SELECT Name as [User1] FROM sys.sysusers WHERE name = N'CEO';\r\n    SELECT Name as [User2] FROM sys.sysusers WHERE name = N'DataAnalystMiami';\r\n\r\n\r\n    -- Step:3 Now let us enforce column level security for the DataAnalystMiami.\r\n    /*  The Sales table in the warehouse has information like ProductID, Analyst, Product, CampaignName, Quantity, Region, State, City, RevenueTarget and Revenue.\r\n        The Revenue generated from every campaign is classified and should be hidden from DataAnalystMiami.\r\n    */\r\n\r\n    REVOKE SELECT ON wwi_security.Sale FROM DataAnalystMiami;\r\n    GRANT SELECT ON wwi_security.Sale([ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget]) TO DataAnalystMiami;\r\n    -- This provides DataAnalystMiami access to all the columns of the Sale table but Revenue.\r\n\r\n    -- Step:4 Then, to check if the security has been enforced, we execute the following query with current User As 'DataAnalystMiami', this will result in an error\r\n    --  since DataAnalystMiami doesn't have select access to the Revenue column\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select TOP 100 * from wwi_security.Sale;\r\n    ---\r\n    -- The following query will succeed since we are not including the Revenue column in the query.\r\n    EXECUTE AS USER ='DataAnalystMiami';\r\n    select [ProductID], [Analyst], [Product], [CampaignName],[Quantity], [Region], [State], [City], [RevenueTarget] from wwi_security.Sale;\r\n    \r\n    -- Step:5 Whereas, the CEO of the company should be authorized with all the information present in the warehouse.To do so, we execute the following query.\r\n    Revert;\r\n    GRANT SELECT ON wwi_security.Sale TO CEO;  --Full access to all columns.\r\n\r\n    -- Step:6 Let us check if our CEO user can see all the information that is present. Assign Current User As 'CEO' and the execute the query\r\n    EXECUTE AS USER ='CEO'\r\n    select * from wwi_security.Sale\r\n    Revert;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Dynamic Data Masking')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "    -------------------------------------------------------------------------Dynamic Data Masking (DDM)----------------------------------------------------------------------------------------------------------\r\n    /*  Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers\r\n        to designate how much of the sensitive data to reveal with minimal impact on the application layer.\r\n        Let see how */\r\n\r\n    /* Scenario: WWI has identified sensitive information in the CustomerInfo table. They would like us to \r\n        obfuscate the CreditCard and Email columns of the CustomerInfo table to DataAnalysts */\r\n\r\n    -- Step:1 Let us first get a view of CustomerInfo table.\r\n    SELECT TOP (100) * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:2 Let's confirm that there are no Dynamic Data Masking (DDM) applied on columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name = 'CustomerInfo';\r\n    -- No results returned verify that no data masking has been done yet.\r\n\r\n    -- Step:3 Now lets mask 'CreditCard' and 'Email' Column of 'CustomerInfo' table.\r\n    ALTER TABLE wwi_security.CustomerInfo  \r\n    ALTER COLUMN [CreditCard] ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\r\n    GO\r\n    -- The columns are sucessfully masked.\r\n\r\n    -- Step:4 Let's see Dynamic Data Masking (DDM) applied on the two columns.\r\n    SELECT c.name, tbl.name as table_name, c.is_masked, c.masking_function  \r\n    FROM sys.masked_columns AS c  \r\n    JOIN sys.tables AS tbl\r\n        ON c.[object_id] = tbl.[object_id]  \r\n    WHERE is_masked = 1\r\n        AND tbl.name ='CustomerInfo';\r\n\r\n    -- Step:5 Now, let us grant SELECT permission to 'DataAnalystMiami' on the 'CustomerInfo' table.\r\n   GRANT SELECT ON wwi_security.CustomerInfo TO DataAnalystMiami;  \r\n\r\n    -- Step:6 Logged in as  'DataAnalystMiami' let us execute the select query and view the result.\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT * FROM wwi_security.CustomerInfo;\r\n\r\n    -- Step:7 Let us remove the data masking using UNMASK permission\r\n    GRANT UNMASK TO DataAnalystMiami;\r\n    EXECUTE AS USER = 'DataAnalystMiami';  \r\n    SELECT *\r\n    FROM wwi_security.CustomerInfo;\r\n    revert;\r\n    REVOKE UNMASK TO DataAnalystMiami;  \r\n\r\n    ----step:8 Reverting all the changes back to as it was.\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN CreditCard DROP MASKED;\r\n    GO\r\n    ALTER TABLE wwi_security.CustomerInfo\r\n    ALTER COLUMN Email DROP MASKED;\r\n    GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 05 - Exercise 3 - Row Level Security')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "/*\tRow level Security (RLS) in Azure Synapse enables us to use group membership to control access to rows in a table.\r\n\tAzure Synapse applies the access restriction every time the data access is attempted from any user. \r\n\tLet see how we can implement row level security in Azure Synapse.*/\r\n\r\n----------------------------------Row-Level Security (RLS), 1: Filter predicates------------------------------------------------------------------\r\n-- Step:1 The Sale table has two Analyst values: DataAnalystMiami and DataAnalystSanDiego. \r\n--     Each analyst has jurisdiction across a specific Region. DataAnalystMiami on the South East Region\r\n--      and DataAnalystSanDiego on the Far West region.\r\nSELECT DISTINCT Analyst, Region FROM wwi_security.Sale order by Analyst ;\r\n\r\n/* Scenario: WWI requires that an Analyst only see the data for their own data from their own region. The CEO should see ALL data.\r\n    In the Sale table, there is an Analyst column that we can use to filter data to a specific Analyst value. */\r\n\r\n/* We will define this filter using what is called a Security Predicate. This is an inline table-valued function that allows\r\n    us to evaluate additional logic, in this case determining if the Analyst executing the query is the same as the Analyst\r\n    specified in the Analyst column in the row. The function returns 1 (will return the row) when a row in the Analyst column is the same as the \r\n    user executing the query (@Analyst = USER_NAME()) or if the user executing the query is the CEO user (USER_NAME() = 'CEO')\r\n    whom has access to all data.\r\n*/\r\n\r\n-- Review any existing security predicates in the database\r\nSELECT * FROM sys.security_predicates\r\n\r\n--Step:2 Create a new Schema to hold the security predicate, then define the predicate function. It returns 1 (or True) when\r\n--  a row should be returned in the parent query.\r\nGO\r\n\r\nCREATE FUNCTION wwi_security.fn_securitypredicate(@Analyst AS sysname)  \r\n    RETURNS TABLE  \r\nWITH SCHEMABINDING  \r\nAS  \r\n    RETURN SELECT 1 AS fn_securitypredicate_result\r\n    WHERE @Analyst = USER_NAME() OR USER_NAME() = 'CEO'\r\nGO\r\n-- Now we define security policy that adds the filter predicate to the Sale table. This will filter rows based on their login name.\r\nCREATE SECURITY POLICY SalesFilter  \r\nADD FILTER PREDICATE wwi_security.fn_securitypredicate(Analyst)\r\nON wwi_security.Sale\r\nWITH (STATE = ON);\r\n\r\n------ Allow SELECT permissions to the Sale Table.------\r\nGRANT SELECT ON wwi_security.Sale TO CEO, DataAnalystMiami, DataAnalystSanDiego;\r\n\r\n-- Step:3 Let us now test the filtering predicate, by selecting data from the Sale table as 'DataAnalystMiami' user.\r\nEXECUTE AS USER = 'DataAnalystMiami' \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- As we can see, the query has returned rows here Login name is DataAnalystMiami\r\n\r\n-- Step:4 Let us test the same for  'DataAnalystSanDiego' user.\r\nEXECUTE AS USER = 'DataAnalystSanDiego';\r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- RLS is working indeed.\r\n\r\n-- Step:5 The CEO should be able to see all rows in the table.\r\nEXECUTE AS USER = 'CEO';  \r\nSELECT * FROM wwi_security.Sale;\r\nrevert;\r\n-- And he can.\r\n\r\n--Step:6 To disable the security policy we just created above, we execute the following.\r\nALTER SECURITY POLICY SalesFilter  \r\nWITH (STATE = OFF);\r\n\r\nDROP SECURITY POLICY SalesFilter;\r\nDROP FUNCTION wwi_security.fn_securitypredicate;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"name": "SQLPool01",
						"type": "SqlPool"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 7 1- 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "TRUNCATE TABLE [wwi_staging].[SaleHeap]\nGO\n\n-- Replace <PrimaryStorage> with the workspace default storage account name.\nCOPY INTO [wwi_staging].[SaleHeap]\nFROM 'https://asadatalakedp203xb.dfs.core.windows.net/wwi-02/sale-small/Year=2019'\nWITH (\n    FILE_TYPE = 'PARQUET',\n    COMPRESSION = 'SNAPPY'\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 7 1- 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [wwi_staging].[DailySalesCounts]\n    (\n        [Date] [int]  NOT NULL,\n        [NorthAmerica] [int]  NOT NULL,\n        [SouthAmerica] [int]  NOT NULL,\n        [Europe] [int]  NOT NULL,\n        [Africa] [int]  NOT NULL,\n        [Asia] [int]  NOT NULL\n    )\nGO\n\n-- Replace <PrimaryStorage> with the workspace default storage account name.\nCOPY INTO [wwi_staging].[DailySalesCounts]\nFROM 'https://asadatalakedp203xb.dfs.core.windows.net/wwi-02/campaign-analytics/dailycounts.txt'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIELDTERMINATOR='.',\n    ROWTERMINATOR=','\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 7 1-1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "INSERT INTO [wwi_staging].[SaleHeap]\nSELECT *\nFROM [wwi_external].[Sales]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 7 2-1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE group_name = 'BigDataLoad')\nBEGIN\n    CREATE WORKLOAD GROUP BigDataLoad WITH  \n    (\n        MIN_PERCENTAGE_RESOURCE = 50 -- integer value\n        ,REQUEST_MIN_RESOURCE_GRANT_PERCENT = 25 --  (guaranteed a minimum of 4 concurrency)\n        ,CAP_PERCENTAGE_RESOURCE = 100\n    );\nEND\n\nIF NOT EXISTS (SELECT * FROM sys.workload_management_workload_classifiers WHERE [name] = 'HeavyLoader')\nBEGIN\n    CREATE WORKLOAD Classifier HeavyLoader WITH\n    (\n        Workload_Group ='BigDataLoad',\n        MemberName='asa.sql.import01',\n        IMPORTANCE = HIGH\n    );\nEND\n\nSELECT * FROM sys.workload_management_workload_classifiers\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 8-1-1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE [wwi].[CampaignAnalytics]\n(\n    [Region] [nvarchar](50)  NOT NULL,\n    [Country] [nvarchar](30)  NOT NULL,\n    [ProductCategory] [nvarchar](50)  NOT NULL,\n    [CampaignName] [nvarchar](500)  NOT NULL,\n    [Revenue] [decimal](10,2)  NULL,\n    [RevenueTarget] [decimal](10,2)  NULL,\n    [City] [nvarchar](50)  NULL,\n    [State] [nvarchar](25)  NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH ( [Region] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF OBJECT_ID(N'[dbo].[Category]', N'U') IS NOT NULL\nDROP TABLE [dbo].[Category]\n\nCREATE TABLE [dbo].[Category]\n( \n    [ID] [float]  NOT NULL,\n    [Category] [varchar](255)  NULL,\n    [SubCategory] [varchar](255)  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nIF OBJECT_ID(N'[dbo].[Books]', N'U') IS NOT NULL\nDROP TABLE [dbo].[Books]\n\nCREATE TABLE [dbo].[Books]\n( \n    [ID] [float]  NOT NULL,\n    [BookListID] [float]  NULL,\n    [Title] [varchar](255)  NULL,\n    [Author] [varchar](255)  NULL,\n    [Duration] [float]  NULL,\n    [Image] [varchar](255)  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nIF OBJECT_ID(N'[dbo].[BookConsumption]', N'U') IS NOT NULL\nDROP TABLE [dbo].[BookConsumption]\n\nCREATE TABLE [dbo].[BookConsumption]\n( \n    [BookID] [float]  NULL,\n    [Clicks] [float]  NULL,\n    [Downloads] [float]  NULL,\n    [Time Spent] [float]  NULL,\n    [Country] [varchar](255)  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nIF OBJECT_ID(N'[dbo].[BookList]', N'U') IS NOT NULL\nDROP TABLE [dbo].[BookList]\n\nCREATE TABLE [dbo].[BookList]\n( \n    [ID] [float]  NOT NULL,\n    [CategoryID] [float]  NULL,\n    [BookList] [varchar](255)  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n\nCOPY INTO Category \nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/books/Category.csv'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIRSTROW = 2\n)\nGO\n\nCOPY INTO Books \nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/books/Books.csv'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIRSTROW = 2\n)\nGO\n\nCOPY INTO BookConsumption \nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/books/BookConsumption.csv'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIRSTROW = 2\n)\nGO\n\nCOPY INTO BookList \nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/books/BookList.csv'\nWITH (\n    FILE_TYPE = 'CSV',\n    FIRSTROW = 2\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT *\nFROM sys.dm_pdw_exec_requests\nWHERE status not in ('Completed','Failed','Cancelled')\n  AND session_id <> session_id()\nORDER BY submit_time DESC;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\nCREATE TABLE dbo.VehicleAverages\n( \n    [AverageEngineTemperature] [float] NOT  NULL,\n    [AverageSpeed] [float] NOT  NULL,\n    [Snapshot] [datetime] NOT  NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    CLUSTERED COLUMNSTORE INDEX\n)\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [userId]\n,[cartId]\n,[preferredProducts]\n,[productReviews]\n,[productId]\n,[reviewText]\n FROM [dbo].[UserProfileHTAP]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Profiles",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\nSELECT TOP 100 *\nFROM OPENROWSET(​PROVIDER = 'CosmosDB',\n                CONNECTION = 'Account=asacosmosdbdp203xb;Database=CustomerProfile',\n                OBJECT = 'UserProfileHTAP',\n                SERVER_CREDENTIAL = 'asacosmosdbdp203xb'\n) AS [UserProfileHTAP]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'wwi-02_asadatalakedp203xb_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [wwi-02_asadatalakedp203xb_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://asadatalakedp203xb.dfs.core.windows.net/wwi-02', \n\t)\nGo\n\nCREATE EXTERNAL TABLE topproducts (\n\t[visitorId] int,\n\t[productId] int,\n\t[itemsPurchasedLast12Months] int,\n\t[preferredProductId] int,\n\t[userId] int,\n\t[isTopProduct] bit,\n\t[isPreferredProduct] bit\n\t)\n\tWITH (\n\tLOCATION = 'top-products/part-00000-54c9150d-9abe-4688-8dd2-0a5ec2a93eb2-c000.snappy.parquet',\n\tDATA_SOURCE = [wwi-02_asadatalakedp203xb_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT TOP 100 * FROM topproducts\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/User Profile HTAP')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "USE master\nGO\n\nIF DB_ID (N'Profiles') IS NULL\nBEGIN\n    CREATE DATABASE Profiles;\nEND\nGO\n\nUSE Profiles\nGO\n\nDROP VIEW IF EXISTS UserProfileHTAP;\nGO\n\nCREATE VIEW UserProfileHTAP\nAS\nSELECT\n    *\nFROM OPENROWSET(\n    'CosmosDB',\n    N'account=asacosmosdbdp203xb;database=CustomerProfile;key=PASSFUSxVhgxCKAfbaGGthvsGhjJAdT8oms8C5IbSkOQq0hLtrs2IzoTRaBDHhSO43MYVYchPK5yaZsVBSa9qA==',\n    UserProfileHTAP\n)\nWITH (\n    userId bigint,\n    cartId varchar(50),\n    preferredProducts varchar(max),\n    productReviews varchar(max)\n) AS profiles\nCROSS APPLY OPENJSON (productReviews)\nWITH (\n    productId bigint,\n    reviewText varchar(1000)\n) AS reviews\nGO\n\n-- 1. Once Azure Synapse Link is configured on Cosmos DB, what is the first step to perform to use Azure Synapse Analytics serverless SQL pools to query the Azure Cosmos DB data?\n\n-- Use the OPENROWSET function\n\n-- Create a database\n-- Correct. Before being able to issue any queries using Azure Synapse Analytics serverless SQL pools, you first must create a database.\n\n-- Use a SELECT clause.\n-- 2. What function provides a rowset view over a JSON document?\n\n-- OPENROWSET.\n\n-- OPENJSON.\n-- Correct. The OPENJSON function provides a rowset view over a JSON document.\n\n-- WITH.\n\n-- 2. How do you disable Azure Synapse Link for Azure Cosmos DB?\n\n-- Delete the Azure Cosmos DB container.\n\n-- Delete the Azure Cosmos DB account.\n-- Correct. Deleting the Azure Cosmos DB account with disable and remove Azure Synapse Link.\n\n-- Set the Azure Synpase Link option to disable on the Azure Cosmos DB container.",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Profiles",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create user')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n-- create login [asa.sql.workloadpool201] with password = 'Tutorial_Password1'\n-- create login [asa.sql.workloadpool202] with password = 'Tutorial_Password1'\n-- create login [asa.sql.importpool201] with password = 'Tutorial_Password1'\n-- create login [asa.sql.importpool202] with password = 'Tutorial_Password1'\n-- create login [asa.sql.pool2highperf] with password = 'Tutorial_Password1'\n\n-- create user [asa.sql.workloadpool201] for login [asa.sql.workloadpool201]\n-- create user [asa.sql.workloadpool202] for login [asa.sql.workloadpool202]\n-- execute sp_addrolemember 'db_datareader', 'asa.sql.workloadpool201' \n-- execute sp_addrolemember 'db_datareader', 'asa.sql.workloadpool202'\n\n\n-- create user [asa.sql.importpool201] for login [asa.sql.importpool201]\n-- create user [asa.sql.importpool202] for login [asa.sql.importpool202]\n-- execute sp_addrolemember 'db_owner', 'asa.sql.importpool201'  \n-- execute sp_addrolemember 'db_owner', 'asa.sql.importpool202' \n\n\n-- create user [asa.sql.pool2highperf] for login [asa.sql.pool2highperf]\nexecute sp_addrolemember 'db_owner', 'asa.sql.pool2highperf' \nexecute sp_addrolemember 'staticrc80', 'asa.sql.pool2highperf' \n  ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "SQLPool2"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lab 2 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE TABLE dbo.[DimCustomer](\n    [CustomerID] [int] NOT NULL,\n    [Title] [nvarchar](8) NULL,\n    [FirstName] [nvarchar](50) NOT NULL,\n    [MiddleName] [nvarchar](50) NULL,\n    [LastName] [nvarchar](50) NOT NULL,\n    [Suffix] [nvarchar](10) NULL,\n    [CompanyName] [nvarchar](128) NULL,\n    [SalesPerson] [nvarchar](256) NULL,\n    [EmailAddress] [nvarchar](50) NULL,\n    [Phone] [nvarchar](25) NULL,\n    [InsertedDate] [datetime] NOT NULL,\n    [ModifiedDate] [datetime] NOT NULL,\n    [HashKey] [char](66)\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[FactResellerSales](\n    [ProductKey] [int] NOT NULL,\n    [OrderDateKey] [int] NOT NULL,\n    [DueDateKey] [int] NOT NULL,\n    [ShipDateKey] [int] NOT NULL,\n    [ResellerKey] [int] NOT NULL,\n    [EmployeeKey] [int] NOT NULL,\n    [PromotionKey] [int] NOT NULL,\n    [CurrencyKey] [int] NOT NULL,\n    [SalesTerritoryKey] [int] NOT NULL,\n    [SalesOrderNumber] [nvarchar](20) NOT NULL,\n    [SalesOrderLineNumber] [tinyint] NOT NULL,\n    [RevisionNumber] [tinyint] NULL,\n    [OrderQuantity] [smallint] NULL,\n    [UnitPrice] [money] NULL,\n    [ExtendedAmount] [money] NULL,\n    [UnitPriceDiscountPct] [float] NULL,\n    [DiscountAmount] [float] NULL,\n    [ProductStandardCost] [money] NULL,\n    [TotalProductCost] [money] NULL,\n    [SalesAmount] [money] NULL,\n    [TaxAmt] [money] NULL,\n    [Freight] [money] NULL,\n    [CarrierTrackingNumber] [nvarchar](25) NULL,\n    [CustomerPONumber] [nvarchar](25) NULL,\n    [OrderDate] [datetime] NULL,\n    [DueDate] [datetime] NULL,\n    [ShipDate] [datetime] NULL\n)\nWITH\n(\n    DISTRIBUTION = HASH([SalesOrderNumber]),\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[DimDate]\n( \n    [DateKey] [int]  NOT NULL,\n    [DateAltKey] [datetime]  NOT NULL,\n    [CalendarYear] [int]  NOT NULL,\n    [CalendarQuarter] [int]  NOT NULL,\n    [MonthOfYear] [int]  NOT NULL,\n    [MonthName] [nvarchar](15)  NOT NULL,\n    [DayOfMonth] [int]  NOT NULL,\n    [DayOfWeek] [int]  NOT NULL,\n    [DayName] [nvarchar](15)  NOT NULL,\n    [FiscalYear] [int]  NOT NULL,\n    [FiscalQuarter] [int]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[DimReseller](\n    [ResellerKey] [int] NOT NULL,\n    [GeographyKey] [int] NULL,\n    [ResellerAlternateKey] [nvarchar](15) NULL,\n    [Phone] [nvarchar](25) NULL,\n    [BusinessType] [varchar](20) NOT NULL,\n    [ResellerName] [nvarchar](50) NOT NULL,\n    [NumberEmployees] [int] NULL,\n    [OrderFrequency] [char](1) NULL,\n    [OrderMonth] [tinyint] NULL,\n    [FirstOrderYear] [int] NULL,\n    [LastOrderYear] [int] NULL,\n    [ProductLine] [nvarchar](50) NULL,\n    [AddressLine1] [nvarchar](60) NULL,\n    [AddressLine2] [nvarchar](60) NULL,\n    [AnnualSales] [money] NULL,\n    [BankName] [nvarchar](50) NULL,\n    [MinPaymentType] [tinyint] NULL,\n    [MinPaymentAmount] [money] NULL,\n    [AnnualRevenue] [money] NULL,\n    [YearOpened] [int] NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n\nCREATE TABLE [dbo].[DimEmployee](\n    [EmployeeKey] [int] NOT NULL,\n    [ParentEmployeeKey] [int] NULL,\n    [EmployeeNationalIDAlternateKey] [nvarchar](15) NULL,\n    [ParentEmployeeNationalIDAlternateKey] [nvarchar](15) NULL,\n    [SalesTerritoryKey] [int] NULL,\n    [FirstName] [nvarchar](50) NOT NULL,\n    [LastName] [nvarchar](50) NOT NULL,\n    [MiddleName] [nvarchar](50) NULL,\n    [NameStyle] [bit] NOT NULL,\n    [Title] [nvarchar](50) NULL,\n    [HireDate] [date] NULL,\n    [BirthDate] [date] NULL,\n    [LoginID] [nvarchar](256) NULL,\n    [EmailAddress] [nvarchar](50) NULL,\n    [Phone] [nvarchar](25) NULL,\n    [MaritalStatus] [nchar](1) NULL,\n    [EmergencyContactName] [nvarchar](50) NULL,\n    [EmergencyContactPhone] [nvarchar](25) NULL,\n    [SalariedFlag] [bit] NULL,\n    [Gender] [nchar](1) NULL,\n    [PayFrequency] [tinyint] NULL,\n    [BaseRate] [money] NULL,\n    [VacationHours] [smallint] NULL,\n    [SickLeaveHours] [smallint] NULL,\n    [CurrentFlag] [bit] NOT NULL,\n    [SalesPersonFlag] [bit] NOT NULL,\n    [DepartmentName] [nvarchar](50) NULL,\n    [StartDate] [date] NULL,\n    [EndDate] [date] NULL,\n    [Status] [nvarchar](50) NULL,\n    [EmployeePhoto] [varbinary](max) NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX (EmployeeKey)\n);\nGO\n\nCREATE TABLE [dbo].[DimProduct](\n    [ProductKey] [int] NOT NULL,\n    [ProductAlternateKey] [nvarchar](25) NULL,\n    [ProductSubcategoryKey] [int] NULL,\n    [WeightUnitMeasureCode] [nchar](3) NULL,\n    [SizeUnitMeasureCode] [nchar](3) NULL,\n    [EnglishProductName] [nvarchar](50) NOT NULL,\n    [SpanishProductName] [nvarchar](50) NULL,\n    [FrenchProductName] [nvarchar](50) NULL,\n    [StandardCost] [money] NULL,\n    [FinishedGoodsFlag] [bit] NOT NULL,\n    [Color] [nvarchar](15) NOT NULL,\n    [SafetyStockLevel] [smallint] NULL,\n    [ReorderPoint] [smallint] NULL,\n    [ListPrice] [money] NULL,\n    [Size] [nvarchar](50) NULL,\n    [SizeRange] [nvarchar](50) NULL,\n    [Weight] [float] NULL,\n    [DaysToManufacture] [int] NULL,\n    [ProductLine] [nchar](2) NULL,\n    [DealerPrice] [money] NULL,\n    [Class] [nchar](2) NULL,\n    [Style] [nchar](2) NULL,\n    [ModelName] [nvarchar](50) NULL,\n    [LargePhoto] [varbinary](max) NULL,\n    [EnglishDescription] [nvarchar](400) NULL,\n    [FrenchDescription] [nvarchar](400) NULL,\n    [ChineseDescription] [nvarchar](400) NULL,\n    [ArabicDescription] [nvarchar](400) NULL,\n    [HebrewDescription] [nvarchar](400) NULL,\n    [ThaiDescription] [nvarchar](400) NULL,\n    [GermanDescription] [nvarchar](400) NULL,\n    [JapaneseDescription] [nvarchar](400) NULL,\n    [TurkishDescription] [nvarchar](400) NULL,\n    [StartDate] [datetime] NULL,\n    [EndDate] [datetime] NULL,\n    [Status] [nvarchar](7) NULL    \n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX (ProductKey)\n);\nGO\n\nCREATE TABLE [dbo].[DimGeography](\n    [GeographyKey] [int] NOT NULL,\n    [City] [nvarchar](30) NULL,\n    [StateProvinceCode] [nvarchar](3) NULL,\n    [StateProvinceName] [nvarchar](50) NULL,\n    [CountryRegionCode] [nvarchar](3) NULL,\n    [EnglishCountryRegionName] [nvarchar](50) NULL,\n    [SpanishCountryRegionName] [nvarchar](50) NULL,\n    [FrenchCountryRegionName] [nvarchar](50) NULL,\n    [PostalCode] [nvarchar](15) NULL,\n    [SalesTerritoryKey] [int] NULL,\n    [IpAddressLocator] [nvarchar](15) NULL\n)\nWITH\n(\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED COLUMNSTORE INDEX\n);\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lab 2 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "COPY INTO [dbo].[DimProduct]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimProduct.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimReseller]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimReseller.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimEmployee]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimEmployee.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimGeography]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimGeography.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[FactResellerSales]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/FactResellerSales.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='\\n',\n    ENCODING = 'UTF16'\n);\nGO\n\nCOPY INTO [dbo].[DimDate]\nFROM 'https://solliancepublicdata.blob.core.windows.net/dataengineering/dp-203/awdata/DimDate.csv'\nWITH (\n    FILE_TYPE='CSV',\n    FIELDTERMINATOR='|',\n    FIELDQUOTE='',\n    ROWTERMINATOR='0x0a',\n    ENCODING = 'UTF16'\n);\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lab 2 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    Coalesce(p.[ModelName], p.[EnglishProductName]) AS [Model]\n    ,g.City AS ResellerCity\n    ,g.StateProvinceName AS StateProvince\n    ,d.[CalendarYear]\n    ,d.[FiscalYear]\n    ,d.[MonthOfYear] AS [Month]\n    ,sum(f.OrderQuantity) AS Quantity\n    ,sum(f.ExtendedAmount) AS Amount\n    ,approx_count_distinct(f.SalesOrderNumber) AS UniqueOrders  \nFROM\n    [dbo].[FactResellerSales] f\nINNER JOIN [dbo].[DimReseller] r\n    ON f.ResellerKey = r.ResellerKey\nINNER JOIN [dbo].[DimGeography] g\n    ON r.GeographyKey = g.GeographyKey\nINNER JOIN [dbo].[DimDate] d\n    ON f.[OrderDateKey] = d.[DateKey]\nINNER JOIN [dbo].[DimProduct] p\n    ON f.[ProductKey] = p.[ProductKey]\nWHERE d.[MonthOfYear] = 10 AND d.[FiscalYear] IN (2012, 2013)\nGROUP BY\n    Coalesce(p.[ModelName], p.[EnglishProductName])\n    ,g.City\n    ,g.StateProvinceName\n    ,d.[CalendarYear]\n    ,d.[FiscalYear]\n    ,d.[MonthOfYear]\nORDER BY d.[FiscalYear]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SQLPool01",
						"poolName": "SQLPool01"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Calculate Top 5 Products')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"449de4c9-7877-454c-9e51-0ea8a2a3d1c7": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80451",
												"1": "1815",
												"2": "46",
												"4": "80451",
												"5": "true",
												"6": "false"
											},
											{
												"0": "80579",
												"1": "2973",
												"2": "15",
												"3": "626",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2973",
												"2": "15",
												"3": "3388",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2973",
												"2": "15",
												"3": "3467",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2973",
												"2": "15",
												"3": "1998",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2973",
												"2": "15",
												"3": "665",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2973",
												"2": "15",
												"3": "924",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2973",
												"2": "15",
												"3": "1546",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2156",
												"2": "31",
												"3": "626",
												"4": "80579",
												"5": "true",
												"6": "true"
											},
											{
												"0": "80579",
												"1": "2156",
												"2": "31",
												"3": "3388",
												"4": "80579",
												"5": "true",
												"6": "true"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "int"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "int"
											},
											{
												"key": "3",
												"name": "preferredProductId",
												"type": "int"
											},
											{
												"key": "4",
												"name": "userId",
												"type": "int"
											},
											{
												"key": "5",
												"name": "isTopProduct",
												"type": "boolean"
											},
											{
												"key": "6",
												"name": "isPreferredProduct",
												"type": "boolean"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3600cd0c-0725-4a38-8ac6-e135b659c5c8/resourceGroups/dp203/providers/Microsoft.Synapse/workspaces/asaworkspacedp203xb/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspacedp203xb.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakedp203xb.dfs.core.windows.net/top-products/*.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"topPurchases = df.select(\r\n",
							"    \"UserId\", \"ProductId\",\r\n",
							"    \"ItemsPurchasedLast12Months\", \"IsTopProduct\",\r\n",
							"    \"IsPreferredProduct\")\r\n",
							"\r\n",
							"# Populate a temporary view so we can query from SQL\r\n",
							"topPurchases.createOrReplaceTempView(\"top_purchases\")\r\n",
							"\r\n",
							"topPurchases.show(100)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"topPreferredProducts = (topPurchases\r\n",
							"    .filter( col(\"IsTopProduct\") == True)\r\n",
							"    .filter( col(\"IsPreferredProduct\") == True)\r\n",
							"    .orderBy( col(\"ItemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"topPreferredProducts.show(100)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE OR REPLACE TEMPORARY VIEW top_5_products\r\n",
							"AS\r\n",
							"    select UserId, ProductId, ItemsPurchasedLast12Months\r\n",
							"    from (select *,\r\n",
							"                row_number() over (partition by UserId order by ItemsPurchasedLast12Months desc) as seqnum\r\n",
							"        from top_purchases\r\n",
							"        ) a\r\n",
							"    where seqnum <= 5 and IsTopProduct == true and IsPreferredProduct = true\r\n",
							"    order by a.UserId\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"top5Products = sqlContext.table(\"top_5_products\")\r\n",
							"\r\n",
							"top5Products.show(100)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"print('before filter: ', topPreferredProducts.count(), ', after filter: ', top5Products.count())\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"top5ProductsOverall = (top5Products.select(\"ProductId\",\"ItemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"ProductId\")\r\n",
							"    .agg( sum(\"ItemsPurchasedLast12Months\").alias(\"Total\") )\r\n",
							"    .orderBy( col(\"Total\").desc() )\r\n",
							"    .limit(5))\r\n",
							"\r\n",
							"top5ProductsOverall.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"import uuid\r\n",
							"\r\n",
							"# Generate random GUID\r\n",
							"runId = uuid.uuid4()\r\n",
							"\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"\r\n",
							"top5ProductsOverall.write.parquet('abfss://wwi-02@asadatalakedp203xb.dfs.core.windows.net/top5-products/' + str(runId) + '.parquet')\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Hyperspace')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3600cd0c-0725-4a38-8ac6-e135b659c5c8/resourceGroups/dp203/providers/Microsoft.Synapse/workspaces/asaworkspacedp203xb/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspacedp203xb.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from hyperspace import *  \r\n",
							"from com.microsoft.hyperspace import *\r\n",
							"from com.microsoft.hyperspace.index import *\r\n",
							"\r\n",
							"# Disable BroadcastHashJoin, so Spark will use standard SortMergeJoin. Currently, Hyperspace indexes utilize SortMergeJoin to speed up query.\r\n",
							"spark.conf.set(\"spark.sql.autoBroadcastJoinThreshold\", -1)\r\n",
							"\r\n",
							"# Replace the value below with the name of your primary ADLS Gen2 account for your Synapse workspace\r\n",
							"datalake = 'asadatalakedp203xb'\r\n",
							"\r\n",
							"dfSales = spark.read.parquet(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/*.parquet\")\r\n",
							"dfSales.show(10)\r\n",
							"\r\n",
							"dfCustomers = spark.read.load(\"abfss://wwi-02@\" + datalake + \".dfs.core.windows.net/data-generators/generator-customer-clean.csv\", format=\"csv\", header=True)\r\n",
							"dfCustomers.show(10)\r\n",
							"\r\n",
							"# Create an instance of Hyperspace\r\n",
							"hyperspace = Hyperspace(spark)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"#create indexes: each one contains a name, a set of indexed columns and a set of included columns\r\n",
							"indexConfigSales = IndexConfig(\"indexSALES\", [\"CustomerId\"], [\"TotalAmount\"])\r\n",
							"indexConfigCustomers = IndexConfig(\"indexCUSTOMERS\", [\"CustomerId\"], [\"FullName\"])\r\n",
							"\r\n",
							"hyperspace.createIndex(dfSales, indexConfigSales)\t\t\t# only create index once\r\n",
							"hyperspace.createIndex(dfCustomers, indexConfigCustomers)\t# only create index once\r\n",
							"hyperspace.indexes().show()\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 200\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Enable Hyperspace - Hyperspace optimization rules become visible to the Spark optimizer and exploit existing Hyperspace indexes to optimize user queries\r\n",
							"Hyperspace.enable(spark)\r\n",
							"df1 = dfSales.filter(\"\"\"CustomerId = 200\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"df1.show()\r\n",
							"df1.explain(True)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df1 = dfSales.filter(\"\"\"CustomerId = 200\"\"\").select(\"\"\"TotalAmount\"\"\")\r\n",
							"\r\n",
							"spark.conf.set(\"spark.hyperspace.explain.displayMode\", \"html\")\r\n",
							"hyperspace.explain(df1, True, displayHTML)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"eqJoin = dfSales.join(dfCustomers, dfSales.CustomerId == dfCustomers.CustomerId).select(dfSales.TotalAmount, dfCustomers.FullName)\r\n",
							"\r\n",
							"hyperspace.explain(eqJoin, True, displayHTML)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Disable Hyperspace - Hyperspace rules no longer apply during query optimization. Disabling Hyperspace has no impact on created indexes because they remain intact\r\n",
							"Hyperspace.disable(spark)\r\n",
							"\r\n",
							"hyperspace.deleteIndex(\"indexSALES\")\r\n",
							"hyperspace.vacuumIndex(\"indexSALES\")\r\n",
							"hyperspace.deleteIndex(\"indexCUSTOMERS\")\r\n",
							"hyperspace.vacuumIndex(\"indexCUSTOMERS\")\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from notebookutils import mssparkutils\r\n",
							"\r\n",
							"#\r\n",
							"# Microsoft Spark Utilities\r\n",
							"#\r\n",
							"# https://docs.microsoft.com/en-us/azure/synapse-analytics/spark/microsoft-spark-utilities?pivots=programming-language-python\r\n",
							"#\r\n",
							"\r\n",
							"# Azure storage access info\r\n",
							"blob_account_name = datalake\r\n",
							"blob_container_name = 'wwi-02'\r\n",
							"blob_relative_path = '/'\r\n",
							"linkedServiceName = datalake\r\n",
							"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linkedServiceName)\r\n",
							"\r\n",
							"# Allow SPARK to access from Blob remotely\r\n",
							"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
							"\r\n",
							"mssparkutils.fs.mkdirs('/SomeNewFolder')\r\n",
							"\r\n",
							"files = mssparkutils.fs.ls('/')\r\n",
							"for file in files:\r\n",
							"    print(file.name, file.isDir, file.isFile, file.path, file.size)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 2 - Explore with Spark')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 0,
				"nbformat_minor": 0,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"7111f76e-8592-4c0a-a3f0-27bdbd1c79dc": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"1": "127962",
												"2": "4475",
												"3": "3",
												"4": "21.66",
												"5": "71.47800000000001",
												"6": "20170501",
												"7": "20.196",
												"8": "3",
												"9": "32",
												"10": "1973"
											},
											{
												"0": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"1": "127962",
												"2": "3903",
												"3": "2",
												"4": "29.39",
												"5": "64.658",
												"6": "20170501",
												"7": "17.226000000000003",
												"8": "3",
												"9": "32",
												"10": "1973"
											},
											{
												"0": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"1": "127962",
												"2": "2235",
												"3": "3",
												"4": "29.25",
												"5": "96.525",
												"6": "20170501",
												"7": "32.274",
												"8": "3",
												"9": "32",
												"10": "1973"
											},
											{
												"0": "95024874-076d-4914-9fb1-e6f24ce7b6d9",
												"1": "127962",
												"2": "194",
												"3": "3",
												"4": "28.44",
												"5": "93.852",
												"6": "20170501",
												"7": "30.393",
												"8": "3",
												"9": "32",
												"10": "1973"
											},
											{
												"0": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"1": "127972",
												"2": "1808",
												"3": "4",
												"4": "21.18",
												"5": "93.19200000000001",
												"6": "20170501",
												"7": "27.588",
												"8": "14",
												"9": "15",
												"10": "5318"
											},
											{
												"0": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"1": "127972",
												"2": "3660",
												"3": "3",
												"4": "28.22",
												"5": "93.126",
												"6": "20170501",
												"7": "25.740000000000002",
												"8": "14",
												"9": "15",
												"10": "5318"
											},
											{
												"0": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"1": "127972",
												"2": "155",
												"3": "1",
												"4": "29.99",
												"5": "32.989000000000004",
												"6": "20170501",
												"7": "8.448",
												"8": "14",
												"9": "15",
												"10": "5318"
											},
											{
												"0": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"1": "127972",
												"2": "108",
												"3": "2",
												"4": "11.71",
												"5": "25.762",
												"6": "20170501",
												"7": "8.074",
												"8": "14",
												"9": "15",
												"10": "5318"
											},
											{
												"0": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"1": "127972",
												"2": "90",
												"3": "4",
												"4": "28.7",
												"5": "126.28000000000002",
												"6": "20170501",
												"7": "39.6",
												"8": "14",
												"9": "15",
												"10": "5318"
											},
											{
												"0": "df994555-acd0-4d64-97f7-ceaeea33f631",
												"1": "127972",
												"2": "111",
												"3": "1",
												"4": "26.35",
												"5": "28.985000000000003",
												"6": "20170501",
												"7": "8.888",
												"8": "14",
												"9": "15",
												"10": "5318"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "int"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "int"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "double"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "double"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "double"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "int"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "int"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "int"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							},
							"027e6088-ec74-43b2-af7b-b1e38ba83435": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "3",
												"1": "4581"
											},
											{
												"0": "3",
												"1": "1365"
											},
											{
												"0": "3",
												"1": "2641"
											},
											{
												"0": "3",
												"1": "220"
											},
											{
												"0": "3",
												"1": "110"
											},
											{
												"0": "3",
												"1": "2"
											},
											{
												"0": "11",
												"1": "3323"
											},
											{
												"0": "11",
												"1": "4763"
											},
											{
												"0": "11",
												"1": "4070"
											},
											{
												"0": "11",
												"1": "582"
											},
											{
												"0": "11",
												"1": "194"
											},
											{
												"0": "11",
												"1": "70"
											},
											{
												"0": "11",
												"1": "32"
											},
											{
												"0": "41",
												"1": "3321"
											},
											{
												"0": "41",
												"1": "244"
											},
											{
												"0": "41",
												"1": "3009"
											},
											{
												"0": "41",
												"1": "126"
											},
											{
												"0": "41",
												"1": "3564"
											},
											{
												"0": "41",
												"1": "1091"
											},
											{
												"0": "41",
												"1": "4660"
											},
											{
												"0": "41",
												"1": "2726"
											},
											{
												"0": "41",
												"1": "88"
											},
											{
												"0": "41",
												"1": "134"
											},
											{
												"0": "41",
												"1": "186"
											},
											{
												"0": "41",
												"1": "84"
											},
											{
												"0": "42",
												"1": "3256"
											},
											{
												"0": "42",
												"1": "4843"
											},
											{
												"0": "42",
												"1": "2836"
											},
											{
												"0": "42",
												"1": "2996"
											},
											{
												"0": "42",
												"1": "4544"
											},
											{
												"0": "42",
												"1": "57"
											},
											{
												"0": "42",
												"1": "35"
											},
											{
												"0": "42",
												"1": "229"
											},
											{
												"0": "43",
												"1": "412"
											},
											{
												"0": "43",
												"1": "2031"
											},
											{
												"0": "43",
												"1": "4220"
											},
											{
												"0": "43",
												"1": "3478"
											},
											{
												"0": "43",
												"1": "2776"
											},
											{
												"0": "43",
												"1": "153"
											},
											{
												"0": "43",
												"1": "30"
											},
											{
												"0": "52",
												"1": "3604"
											},
											{
												"0": "52",
												"1": "2711"
											},
											{
												"0": "52",
												"1": "4830"
											},
											{
												"0": "52",
												"1": "4260"
											},
											{
												"0": "52",
												"1": "686"
											},
											{
												"0": "52",
												"1": "609"
											},
											{
												"0": "52",
												"1": "619"
											},
											{
												"0": "52",
												"1": "160"
											},
											{
												"0": "52",
												"1": "209"
											},
											{
												"0": "52",
												"1": "18"
											},
											{
												"0": "61",
												"1": "2430"
											},
											{
												"0": "61",
												"1": "4196"
											},
											{
												"0": "61",
												"1": "2482"
											},
											{
												"0": "61",
												"1": "3663"
											},
											{
												"0": "61",
												"1": "1329"
											},
											{
												"0": "61",
												"1": "2655"
											},
											{
												"0": "61",
												"1": "2751"
											},
											{
												"0": "61",
												"1": "1302"
											},
											{
												"0": "61",
												"1": "37"
											},
											{
												"0": "61",
												"1": "176"
											},
											{
												"0": "61",
												"1": "112"
											},
											{
												"0": "64",
												"1": "2229"
											},
											{
												"0": "64",
												"1": "3352"
											},
											{
												"0": "64",
												"1": "2551"
											},
											{
												"0": "64",
												"1": "3039"
											},
											{
												"0": "64",
												"1": "2240"
											},
											{
												"0": "64",
												"1": "1140"
											},
											{
												"0": "64",
												"1": "1397"
											},
											{
												"0": "64",
												"1": "3779"
											},
											{
												"0": "64",
												"1": "263"
											},
											{
												"0": "64",
												"1": "1447"
											},
											{
												"0": "64",
												"1": "48"
											},
											{
												"0": "64",
												"1": "169"
											},
											{
												"0": "70",
												"1": "4109"
											},
											{
												"0": "70",
												"1": "1189"
											},
											{
												"0": "70",
												"1": "2648"
											},
											{
												"0": "70",
												"1": "1911"
											},
											{
												"0": "70",
												"1": "3514"
											},
											{
												"0": "70",
												"1": "1564"
											},
											{
												"0": "70",
												"1": "2549"
											},
											{
												"0": "70",
												"1": "4317"
											},
											{
												"0": "70",
												"1": "3645"
											},
											{
												"0": "70",
												"1": "226"
											},
											{
												"0": "70",
												"1": "19"
											},
											{
												"0": "88",
												"1": "1604"
											},
											{
												"0": "88",
												"1": "808"
											},
											{
												"0": "88",
												"1": "2461"
											},
											{
												"0": "88",
												"1": "3004"
											},
											{
												"0": "88",
												"1": "3551"
											},
											{
												"0": "88",
												"1": "1062"
											},
											{
												"0": "88",
												"1": "3231"
											},
											{
												"0": "88",
												"1": "172"
											},
											{
												"0": "88",
												"1": "7"
											},
											{
												"0": "91",
												"1": "323"
											},
											{
												"0": "91",
												"1": "1757"
											},
											{
												"0": "91",
												"1": "607"
											},
											{
												"0": "91",
												"1": "2995"
											},
											{
												"0": "91",
												"1": "2465"
											},
											{
												"0": "91",
												"1": "1271"
											},
											{
												"0": "91",
												"1": "4622"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "int"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3600cd0c-0725-4a38-8ac6-e135b659c5c8/resourceGroups/dp203/providers/Microsoft.Synapse/workspaces/asaworkspacedp203xb/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspacedp203xb.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Exploring and fixing data with Synapse Spark\n",
							"\n",
							"In this task, you will use a Synapse Spark notebook to explore a few of the files in the `wwi-02/sale-poc` folder in the data lake. You will also use Python code to fix the issues with the `sale-20170502.csv` file, so all the files in the directory can be ingested using a Synapse Pipeline later in this lab.\n",
							"\n",
							"The first thing we need to is set a variable within the notebook to provide the name of your primary data lake storage account. Before executing the cell below, you will need to replace `[YOUR-DATA-LAKE-ACCOUNT-NAME]` with the name of the primary data lake storage account associated with your Syanpse workspace.\n",
							"\n",
							"You can find the name of your data lake storage account by navigating to the **Data** hub in Synapse Studio, selecting the **Linked** tab, and locating the storage account name that begins with **asadatalake** under **Azure Data Lake Storage Gen2**.\n",
							"\n",
							"![The primary data lake storage account is highlighted on the Data hub's Linked tab.](https://solliancepublicdata.blob.core.windows.net/images/synapse/data-hub-primary-data-lake-storage-account.png \"Primary ADLS Gen2 Account\")\n",
							"\n",
							"1. Copy the name of your data lake storage account and paste it in place of `[YOUR-DATA-LAKE-ACCOUNT-NAME]` in the cell below, then execute the cell by selecting the **Run cell** button that becomes visible when you select the cell.\n",
							"\n",
							"    ![The primary data lake storage account is highlighted on the Data hub's Linked tab.](https://solliancepublicdata.blob.core.windows.net/images/synapse/synapse-notebook-run-cell.png \"Primary ADLS Gen2 Account\")\n",
							"\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"adls_account_name = 'asadatalakedp203xb'"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Exploring files with Spark\n",
							"\n",
							"1. The first step in exploring data using Synapse Spark is to load a file from the data lake. For this, we can use the `spark.read.load()` method of the `SparkSession`.\n",
							"\n",
							"2. In Spark, we can load the data from our files into [DataFrames](https://spark.apache.org/docs/2.2.0/sql-programming-guide.html#datasets-and-dataframes), which are an abstraction that allows data to be structured in named columns. Execute the cell below to load the data from the `sale-20170501.csv` file into a data frame. You can run the cell by hovering your mouse over the left-hand side of the cell and then selecting the blue **Run cell** button.\n",
							"\n",
							"    ![The Run Cell button is highlighted to the left of the cell contents to execute.](https://solliancepublicdata.blob.core.windows.net/images/synapse/synapse-notebook-run-cell-load-sale-20170501-csv.png \"Run cell\")"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# First, load the file `sale-20170501.csv` file, which we know from our previous exploration to be formatted correctly.\n",
							"# Note the use of the `header` and `inferSchema` parameters. Header indicates the first row of the file contains column headers,\n",
							"# and `inferSchema` instruct Spark to use data within the file to infer data types.\n",
							"df = spark.read.load(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170501.csv', format='csv', header=True, inferSchema=True)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## View the contents of the DataFrame\n",
							"\n",
							"With the data from the `sale-20170501.csv` file loaded into a data frame, we can now use various methods of a data frame to explore the properties of the data.\n",
							"\n",
							"1. First, let's look at the data as it was imported. Execute the cell below to view and inspect the data in the data frame."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"CustomerId"
									],
									"yLabel": "CustomerId",
									"xLabel": "TransactionId",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"CustomerId\":{\"cdd2ed88-8aae-4295-884a-ac4d40c3c33c\":44,\"e067fc11-e07d-4517-bc93-f7dc4b44f35e\":18}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"2. Like we saw duing exploration with the SQL on-demand capabilities of Azure Synapse, Spark allows us to view and query against the data contained within files. \n",
							"\n",
							"3. Now, use the `printSchema()` method of the data frame to view the results of using the `inferSchema` parameter when creating the data frame. Execute the cell below and observe the output."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Now, print the inferred schema. We will need this information below to help with the missing headers in the May 2, 2017 file.\n",
							"df.printSchema()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. The `printSchema` method outputs both field names and data types that are based on the Spark engine's evaluation of the data contained within each field.\n",
							"\n",
							"    > We can use this information later to help define the schema for the poorly formed `sale-20170502.csv` file. In addition to the field names and data types, we should note the number of features or columns contained in the file. In this case, note that there are 11 fields. That will be used to determine where to split the single row of data.\n",
							"\n",
							"5. As an example of further exploration we can do, run the cell below to create and display a new data frame that contains an ordered list of distinct Customer and Product Id pairings. We can use these types of functions to find invalid or empty values quickly in targeted fields."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [
										"ProductId"
									],
									"yLabel": "ProductId",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"ProductId\":{\"\":189206}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							},
							"collapsed": false
						},
						"source": [
							"# Create a new data frame containing a list of distinct CustomerId and ProductId values in descending order of the CustomerId.\n",
							"df_distinct_products = df.select('CustomerId', 'ProductId').distinct().orderBy('CustomerId')\n",
							"\n",
							"# Display the first 100 rows of the resulting data frame.\n",
							"display(df_distinct_products.limit(100))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's attempt to open and explore the `sale-20170502.csv` file using the `load()` method, as we did above."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Next, let's try to read in the May 2, 2017 file using the same `load()` method we used for the first file.\n",
							"df = spark.read.load(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502.csv', format='csv')\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"7. As we saw in T-SQL, we receive a similar error in Spark that the number of columns processed may have exceeded limit of 20480 columns. To work with the data in this file, we need to use more advanced methods, as you will see in the next section below.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Handling and fixing poorly formed CSV files\n",
							"\n",
							"> The steps below provide example code for fixing the poorly-formed CSV file, `sale-20170502.csv` we discovered during exploration of the files in the `wwi-02/sale-poc` folder. This is just one of many ways to handle \"fixing\" a poorly-formed CSV file using Spark.\n",
							"\n",
							"1. To \"fix\" the bad file, we need to take a programmatic approach, using Python to read in the contents of the file and then parse them to put them into the proper shape.\n",
							"\n",
							"    > To handle the data being in a single row, we can use the `textFile()` method of our `SparkContext` to read the file as a collection of rows into a resilient distributed dataset (RDD). This allows us to get around the errors around the number of columns because we are essentially getting a single string value stored in a single column.\n",
							"\n",
							"2. Execute the cell below to load the RDD with data from the file."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Import the NumPy library. NumPy is a python library used for working with arrays.\n",
							"import numpy as np\n",
							"\n",
							"# Read the CSV file into a resilient distributed dataset (RDD) as a text file. This will read each row of the file into rows in an RDD.\n",
							"rdd = sc.textFile(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502.csv')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"source": [
							"3. With the data now stored in an RDD, we can access the first, and only, populated row in the RDD, and split that into individual fields. We know from our inspection of the file in Notepad++ that it all the fields are separated by a comma (,), so let's start by splitting on that to create an array of field values. Execute the cell below to create a data array."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Since we know there is only one row, grab the first row of the RDD and split in on the field delimiter (comma).\n",
							"data = rdd.first().split(',')\n",
							"\n",
							"field_count = len(data)\n",
							"# Print out the count of fields read into the array.\n",
							"print(field_count)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "markdown",
						"source": [
							"4. By splitting the row on the field delimiter, we created an array of all the individual field values in the file, the count of which you can see above.\n",
							"\n",
							"5. Now, run the cell below to do a quick calculation on the expected number of rows that will be generated by parsing every 11 fields into a single row."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"import math\n",
							"\n",
							"expected_row_count = math.floor(field_count / 11)\n",
							"print(f'The expected row count is: {expected_row_count}')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"6. Next, let's create an array to store the data associated with each \"row\".\n",
							"\n",
							"    > We will set the max_index to the number of columns that are expected in each row. We know from our exploration of other files in the `wwi-02/sale-poc` folder that they contain 11 columns, so that is the value we will set.\n",
							"\n",
							"7. In addition to setting variables, we will use the cell below to loop through the `data` array and assign every 11 values to a row. By doing this, we are able to \"split\" the data that was once a single row into appropriate rows containing the proper data and columns from the file.\n",
							"\n",
							"8. Execute the cell below to create an array of rows from the file data."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Create an array to store the data associated with each \"row\". Set the max_index to the number of columns that are in each row. This is 11, which we noted above when viewing the schema of the May 1 file.\n",
							"row_list = []\n",
							"max_index = 11\n",
							"\n",
							"# Now, we are going to loop through the array of values extracted from the single row of the file and build rows consisting of 11 columns.\n",
							"while max_index <= len(data):\n",
							"    row = [data[i] for i in np.arange(max_index-11, max_index)]\n",
							"    row_list.append(row)\n",
							"\n",
							"    max_index += 11\n",
							"\n",
							"print(f'The row array contains {len(row_list)} rows. The expected number of rows was {expected_row_count}.')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "markdown",
						"source": [
							"9. The last thing we need to do to be able to work with the file data as rows is to read it into a Spark DataFrame. In the cell below, we use the `createDataFrame()` method to convert the `row_list` array into a data frame, which also adding names for the columns. Column names are based on the schema we observed in the well formatted files in the `wwi-02/sale-poc` directory.\n",
							"\n",
							"10. Execute the cell below to create a data frame containing row data from the file and then display the first 10 rows."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"TransactionId"
									],
									"values": [
										"TransactionId"
									],
									"yLabel": "TransactionId",
									"xLabel": "TransactionId",
									"aggregation": "COUNT",
									"aggByBackend": false
								},
								"aggData": "{\"TransactionId\":{\"5455a4b4-62bd-401a-b5c6-79ea24f30531\":5,\"a4116581-5aad-416a-b767-aefa516737b1\":5}}",
								"isSummary": false,
								"previewData": {
									"filter": null
								},
								"isSql": false
							}
						},
						"source": [
							"# Finally, we can use the row_list we created above to create a DataFrame. We can add to this a schema parameter, which contains the column names we saw in the schema of the first file.\n",
							"df_fixed = spark.createDataFrame(row_list,schema=['TransactionId', 'CustomerId', 'ProductId', 'Quantity', 'Price', 'TotalAmount', 'TransactionDateId', 'ProfitAmount', 'Hour', 'Minute', 'StoreId'])\n",
							"display(df_fixed.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write the \"fixed\" file into the data lake\n",
							"\n",
							"1. The last step we will take as part of our exploration and file fixing process is to write the data back into the data lake, so it can be ingested following the same process as the other files in the `wwi-02/sale-poc` folder.\n",
							"\n",
							"2. Execute the cell below to save the data frame into the data lake a series of files in a folder named `sale-20170502-fixed`.\n",
							"\n",
							"    > Note: Spark parallelizes workloads across worker nodes, so when saving files, you will notice they are saved as a collection \"part\" files, and not as a single file. While there are some libraries you can use to create a single file, it is helpful to get used to working with files generated via Spark notebooks as they are natively created.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"df.write.format('csv').option('header',True).mode('overwrite').option('sep',',').save(f'abfss://wwi-02@{adls_account_name}.dfs.core.windows.net/sale-poc/sale-20170502-fixed')"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Inspect the fixed file in the data lake\n",
							"\n",
							"1. With the fixed file written to the data lake, you can quickly inpsect it to verify the files are now formatted properly. Select the `wwi-02` tab above and then double-click on the `sale-20170502-fixed` folder.\n",
							"\n",
							"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/wwi-02-sale-poc-sale-20170502-fixed.png)\n",
							"\n",
							"2. In the `sale-20170502-fixed` folder, right-click the first file whose name begins with `part` and whose extension is `.csv` and select **Preview** from the context menu.\n",
							"\n",
							"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/wwi-02-sale-poc-sale-20170502-fixed-content.png)\n",
							"\n",
							"3. In the **Preview** dialog, verify you see the proper columns and that the data looks valid in each field.\n",
							"\n",
							"    ![](https://solliancepublicdata.blob.core.windows.net/images/synapse/sale-20170502-fixed-preview.png)\n",
							"\n",
							"## Wrap-up\n",
							"\n",
							"Throughout this exercise, you used a Spark notebook to explore data stored within files in the data lake. You used Python code to extract data from a poorly formatted CSV file, assemble the data from that file into proper rows, and then write the \"fixed\" file back out into your data lake.\n",
							"\n",
							"You can now return to the lab guide to continue with the next section of Lab 2.\n",
							""
						],
						"attachments": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lab 5')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"754d70f4-7ac5-4dde-99bb-3576777609d8": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "64",
												"3": 4,
												"4": "31.280000000000000000",
												"5": "125.120000000000000000",
												"6": "20101231",
												"7": "38.760000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "64",
												"3": 3,
												"4": "31.280000000000000000",
												"5": "93.840000000000000000",
												"6": "20101231",
												"7": "29.070000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "64",
												"3": 2,
												"4": "31.280000000000000000",
												"5": "62.560000000000000000",
												"6": "20101231",
												"7": "19.380000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "3348",
												"3": 2,
												"4": "27.700000000000000000",
												"5": "55.400000000000000000",
												"6": "20101231",
												"7": "14.020000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "1470",
												"3": 1,
												"4": "29.140000000000000000",
												"5": "29.140000000000000000",
												"6": "20101231",
												"7": "9.170000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "1266",
												"3": 1,
												"4": "29.650000000000000000",
												"5": "29.650000000000000000",
												"6": "20101231",
												"7": "8.950000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "48",
												"3": 3,
												"4": "35.550000000000000000",
												"5": "106.650000000000000000",
												"6": "20101231",
												"7": "29.250000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "132",
												"3": 3,
												"4": "34.180000000000000000",
												"5": "102.540000000000000000",
												"6": "20101231",
												"7": "24.720000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "69",
												"3": 3,
												"4": "31.060000000000000000",
												"5": "93.180000000000000000",
												"6": "20101231",
												"7": "30.210000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											},
											{
												"0": "822ea5b1-15e1-4a89-a224-db5332f27b3e",
												"1": "10",
												"2": "203",
												"3": 3,
												"4": "31.690000000000000000",
												"5": "95.070000000000000000",
												"6": "20101231",
												"7": "28.050000000000000000",
												"8": 7,
												"9": 55,
												"10": "2020"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"2"
											],
											"seriesFieldKeys": [
												"5"
											],
											"isStacked": false
										}
									}
								}
							},
							"e912faf1-6d3e-4d80-be37-e2f50db37e8a": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "20101231",
												"1": "64",
												"2": "52975.230000000000000000",
												"3": "2.5547",
												"4": "5467"
											},
											{
												"0": "20101231",
												"1": "3348",
												"2": "1409.010000000000000000",
												"3": "2.4512",
												"4": "201"
											},
											{
												"0": "20101231",
												"1": "1470",
												"2": "1595.580000000000000000",
												"3": "2.6364",
												"4": "174"
											},
											{
												"0": "20101231",
												"1": "1266",
												"2": "10731.050000000000000000",
												"3": "2.5896",
												"4": "1199"
											},
											{
												"0": "20101231",
												"1": "48",
												"2": "39516.750000000000000000",
												"3": "2.5158",
												"4": "4053"
											},
											{
												"0": "20101231",
												"1": "132",
												"2": "42468.960000000000000000",
												"3": "2.4995",
												"4": "5154"
											},
											{
												"0": "20101231",
												"1": "69",
												"2": "41256.790000000000000000",
												"3": "2.4936",
												"4": "4097"
											},
											{
												"0": "20101231",
												"1": "203",
												"2": "46179.650000000000000000",
												"3": "2.4844",
												"4": "4939"
											},
											{
												"0": "20101231",
												"1": "8",
												"2": "27098.000000000000000000",
												"3": "2.4798",
												"4": "3985"
											},
											{
												"0": "20101231",
												"1": "4393",
												"2": "7880.040000000000000000",
												"3": "2.5226",
												"4": "1062"
											},
											{
												"0": "20101231",
												"1": "4650",
												"2": "6655.100000000000000000",
												"3": "2.5491",
												"4": "1091"
											},
											{
												"0": "20101231",
												"1": "629",
												"2": "9878.240000000000000000",
												"3": "2.4606",
												"4": "1154"
											},
											{
												"0": "20101231",
												"1": "2930",
												"2": "1170.000000000000000000",
												"3": "2.3284",
												"4": "156"
											},
											{
												"0": "20101231",
												"1": "2253",
												"2": "8232.000000000000000000",
												"3": "2.54",
												"4": "1176"
											},
											{
												"0": "20101231",
												"1": "3860",
												"2": "8627.520000000000000000",
												"3": "2.4731",
												"4": "1056"
											},
											{
												"0": "20101231",
												"1": "216",
												"2": "41157.540000000000000000",
												"3": "2.4973",
												"4": "5007"
											},
											{
												"0": "20101231",
												"1": "147",
												"2": "37010.530000000000000000",
												"3": "2.4916",
												"4": "5063"
											},
											{
												"0": "20101231",
												"1": "23",
												"2": "41280.030000000000000000",
												"3": "2.5009",
												"4": "4059"
											},
											{
												"0": "20101231",
												"1": "5",
												"2": "33314.600000000000000000",
												"3": "2.4792",
												"4": "4180"
											},
											{
												"0": "20101231",
												"1": "4626",
												"2": "7066.350000000000000000",
												"3": "2.5197",
												"4": "1149"
											},
											{
												"0": "20101231",
												"1": "692",
												"2": "7452.660000000000000000",
												"3": "2.4922",
												"4": "1114"
											},
											{
												"0": "20101231",
												"1": "1432",
												"2": "1963.520000000000000000",
												"3": "2.3111",
												"4": "208"
											},
											{
												"0": "20101231",
												"1": "755",
												"2": "8572.800000000000000000",
												"3": "2.5067",
												"4": "1128"
											},
											{
												"0": "20101231",
												"1": "84",
												"2": "30987.600000000000000000",
												"3": "2.5151",
												"4": "4165"
											},
											{
												"0": "20101231",
												"1": "213",
												"2": "29192.160000000000000000",
												"3": "2.4956",
												"4": "3988"
											},
											{
												"0": "20101231",
												"1": "74",
												"2": "31406.130000000000000000",
												"3": "2.479",
												"4": "4011"
											},
											{
												"0": "20101231",
												"1": "237",
												"2": "25826.740000000000000000",
												"3": "2.5567",
												"4": "4106"
											},
											{
												"0": "20101231",
												"1": "255",
												"2": "9264.000000000000000000",
												"3": "2.5065",
												"4": "3860"
											},
											{
												"0": "20101231",
												"1": "256",
												"2": "38895.570000000000000000",
												"3": "2.4963",
												"4": "4039"
											},
											{
												"0": "20101231",
												"1": "3038",
												"2": "11903.760000000000000000",
												"3": "2.5223",
												"4": "1188"
											},
											{
												"0": "20101231",
												"1": "4100",
												"2": "9885.920000000000000000",
												"3": "2.5972",
												"4": "1096"
											},
											{
												"0": "20101231",
												"1": "4569",
												"2": "2031.750000000000000000",
												"3": "2.52",
												"4": "189"
											},
											{
												"0": "20101231",
												"1": "3939",
												"2": "1849.200000000000000000",
												"3": "2.4731",
												"4": "230"
											},
											{
												"0": "20101231",
												"1": "4506",
												"2": "6338.710000000000000000",
												"3": "2.5255",
												"4": "1091"
											},
											{
												"0": "20101231",
												"1": "1173",
												"2": "8278.600000000000000000",
												"3": "2.4703",
												"4": "1166"
											},
											{
												"0": "20101231",
												"1": "684",
												"2": "1884.870000000000000000",
												"3": "2.2375",
												"4": "179"
											},
											{
												"0": "20101231",
												"1": "31",
												"2": "33544.910000000000000000",
												"3": "2.4766",
												"4": "4027"
											},
											{
												"0": "20101231",
												"1": "126",
												"2": "38938.800000000000000000",
												"3": "2.5576",
												"4": "4440"
											},
											{
												"0": "20101231",
												"1": "180",
												"2": "34710.870000000000000000",
												"3": "2.5285",
												"4": "4177"
											},
											{
												"0": "20101231",
												"1": "3006",
												"2": "8140.620000000000000000",
												"3": "2.4957",
												"4": "1173"
											},
											{
												"0": "20101231",
												"1": "4842",
												"2": "7760.160000000000000000",
												"3": "2.5565",
												"4": "1268"
											},
											{
												"0": "20101231",
												"1": "2854",
												"2": "6080.480000000000000000",
												"3": "2.44",
												"4": "976"
											},
											{
												"0": "20101231",
												"1": "3871",
												"2": "1390.080000000000000000",
												"3": "2.5857",
												"4": "181"
											},
											{
												"0": "20101231",
												"1": "254",
												"2": "42714.330000000000000000",
												"3": "2.4228",
												"4": "4143"
											},
											{
												"0": "20101231",
												"1": "4145",
												"2": "7927.500000000000000000",
												"3": "2.5301",
												"4": "1050"
											},
											{
												"0": "20101231",
												"1": "10",
												"2": "15652.980000000000000000",
												"3": "2.5371",
												"4": "4242"
											},
											{
												"0": "20101231",
												"1": "182",
												"2": "44954.800000000000000000",
												"3": "2.5356",
												"4": "3740"
											},
											{
												"0": "20101231",
												"1": "82",
												"2": "38008.320000000000000000",
												"3": "2.4938",
												"4": "4242"
											},
											{
												"0": "20101231",
												"1": "202",
												"2": "26960.790000000000000000",
												"3": "2.4962",
												"4": "3959"
											},
											{
												"0": "20101231",
												"1": "121",
												"2": "26743.080000000000000000",
												"3": "2.5064",
												"4": "4108"
											},
											{
												"0": "20101231",
												"1": "4166",
												"2": "9706.320000000000000000",
												"3": "2.4868",
												"4": "1037"
											},
											{
												"0": "20101231",
												"1": "942",
												"2": "13101.790000000000000000",
												"3": "2.5341",
												"4": "1039"
											},
											{
												"0": "20101231",
												"1": "4151",
												"2": "11817.260000000000000000",
												"3": "2.5227",
												"4": "1057"
											},
											{
												"0": "20101231",
												"1": "2364",
												"2": "2010.560000000000000000",
												"3": "2.6076",
												"4": "206"
											},
											{
												"0": "20101231",
												"1": "1064",
												"2": "1144.500000000000000000",
												"3": "2.2245",
												"4": "109"
											},
											{
												"0": "20101231",
												"1": "2077",
												"2": "2445.300000000000000000",
												"3": "2.6292",
												"4": "234"
											},
											{
												"0": "20101231",
												"1": "1468",
												"2": "7920.500000000000000000",
												"3": "2.4548",
												"4": "1085"
											},
											{
												"0": "20101231",
												"1": "4698",
												"2": "8542.160000000000000000",
												"3": "2.4989",
												"4": "1142"
											},
											{
												"0": "20101231",
												"1": "1483",
												"2": "9514.900000000000000000",
												"3": "2.4836",
												"4": "986"
											},
											{
												"0": "20101231",
												"1": "4207",
												"2": "1661.650000000000000000",
												"3": "2.5513",
												"4": "199"
											},
											{
												"0": "20101231",
												"1": "136",
												"2": "27390.720000000000000000",
												"3": "2.5459",
												"4": "4076"
											},
											{
												"0": "20101231",
												"1": "189",
												"2": "38838.800000000000000000",
												"3": "2.5025",
												"4": "4004"
											},
											{
												"0": "20101231",
												"1": "73",
												"2": "44844.550000000000000000",
												"3": "2.5105",
												"4": "4195"
											},
											{
												"0": "20101231",
												"1": "194",
												"2": "37475.490000000000000000",
												"3": "2.4917",
												"4": "4069"
											},
											{
												"0": "20101231",
												"1": "14",
												"2": "34693.120000000000000000",
												"3": "2.4779",
												"4": "4096"
											},
											{
												"0": "20101231",
												"1": "959",
												"2": "8901.880000000000000000",
												"3": "2.4442",
												"4": "1007"
											},
											{
												"0": "20101231",
												"1": "4855",
												"2": "1299.960000000000000000",
												"3": "2.3",
												"4": "207"
											},
											{
												"0": "20101231",
												"1": "46",
												"2": "36986.400000000000000000",
												"3": "2.5319",
												"4": "4203"
											},
											{
												"0": "20101231",
												"1": "218",
												"2": "25815.480000000000000000",
												"3": "2.5065",
												"4": "5003"
											},
											{
												"0": "20101231",
												"1": "1873",
												"2": "9276.930000000000000000",
												"3": "2.4488",
												"4": "1053"
											},
											{
												"0": "20101231",
												"1": "861",
												"2": "5864.170000000000000000",
												"3": "2.4807",
												"4": "1027"
											},
											{
												"0": "20101231",
												"1": "3766",
												"2": "8670.750000000000000000",
												"3": "2.5325",
												"4": "1051"
											},
											{
												"0": "20101231",
												"1": "3180",
												"2": "1468.850000000000000000",
												"3": "2.3387",
												"4": "145"
											},
											{
												"0": "20101231",
												"1": "2716",
												"2": "9500.380000000000000000",
												"3": "2.4049",
												"4": "1087"
											},
											{
												"0": "20101231",
												"1": "358",
												"2": "11928.000000000000000000",
												"3": "2.4615",
												"4": "1120"
											},
											{
												"0": "20101231",
												"1": "9",
												"2": "38547.600000000000000000",
												"3": "2.5071",
												"4": "5295"
											},
											{
												"0": "20101231",
												"1": "33",
												"2": "31783.600000000000000000",
												"3": "2.5172",
												"4": "4390"
											},
											{
												"0": "20101231",
												"1": "138",
												"2": "33537.660000000000000000",
												"3": "2.4768",
												"4": "4161"
											},
											{
												"0": "20101231",
												"1": "96",
												"2": "66600.400000000000000000",
												"3": "2.5294",
												"4": "5084"
											},
											{
												"0": "20101231",
												"1": "777",
												"2": "5834.780000000000000000",
												"3": "2.5038",
												"4": "994"
											},
											{
												"0": "20101231",
												"1": "4331",
												"2": "1989.120000000000000000",
												"3": "2.6701",
												"4": "259"
											},
											{
												"0": "20101231",
												"1": "3735",
												"2": "10738.480000000000000000",
												"3": "2.5082",
												"4": "1076"
											},
											{
												"0": "20101231",
												"1": "3775",
												"2": "12616.950000000000000000",
												"3": "2.5363",
												"4": "1083"
											},
											{
												"0": "20101231",
												"1": "29",
												"2": "43124.550000000000000000",
												"3": "2.5167",
												"4": "4291"
											},
											{
												"0": "20101231",
												"1": "113",
												"2": "27276.060000000000000000",
												"3": "2.516",
												"4": "4242"
											},
											{
												"0": "20101231",
												"1": "249",
												"2": "40038.570000000000000000",
												"3": "2.475",
												"4": "3861"
											},
											{
												"0": "20101231",
												"1": "2052",
												"2": "8540.800000000000000000",
												"3": "2.4505",
												"4": "1088"
											},
											{
												"0": "20101231",
												"1": "2717",
												"2": "1724.160000000000000000",
												"3": "2.56",
												"4": "192"
											},
											{
												"0": "20101231",
												"1": "4305",
												"2": "1357.900000000000000000",
												"3": "2.3718",
												"4": "185"
											},
											{
												"0": "20101231",
												"1": "1854",
												"2": "9950.280000000000000000",
												"3": "2.5368",
												"4": "1172"
											},
											{
												"0": "20101231",
												"1": "3331",
												"2": "7570.200000000000000000",
												"3": "2.4183",
												"4": "1110"
											},
											{
												"0": "20101231",
												"1": "403",
												"2": "1590.800000000000000000",
												"3": "2.3563",
												"4": "205"
											},
											{
												"0": "20101231",
												"1": "230",
												"2": "36581.000000000000000000",
												"3": "2.4795",
												"4": "3925"
											},
											{
												"0": "20101231",
												"1": "151",
												"2": "39321.750000000000000000",
												"3": "2.5317",
												"4": "4033"
											},
											{
												"0": "20101231",
												"1": "155",
												"2": "30213.120000000000000000",
												"3": "2.5105",
												"4": "3934"
											},
											{
												"0": "20101231",
												"1": "1635",
												"2": "9359.520000000000000000",
												"3": "2.4667",
												"4": "1147"
											},
											{
												"0": "20101231",
												"1": "1825",
												"2": "9048.900000000000000000",
												"3": "2.5233",
												"4": "1085"
											},
											{
												"0": "20101231",
												"1": "633",
												"2": "11240.400000000000000000",
												"3": "2.4061",
												"4": "1102"
											},
											{
												"0": "20101231",
												"1": "2995",
												"2": "908.040000000000000000",
												"3": "2.3115",
												"4": "141"
											},
											{
												"0": "20101231",
												"1": "3074",
												"2": "2727.290000000000000000",
												"3": "2.5341",
												"4": "223"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "1",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "2",
												"name": "(sum)ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "(avg)Quantity",
												"type": "double"
											},
											{
												"key": "4",
												"name": "(sum)Quantity",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"55400812-a5d9-4b2a-acb4-43ece8da5ff8": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "101795",
												"1": "2842",
												"2": "1"
											},
											{
												"0": "102738",
												"1": "4213",
												"2": "1"
											},
											{
												"0": "101820",
												"1": "1860",
												"2": "1"
											},
											{
												"0": "101007",
												"1": "4395",
												"2": "1"
											},
											{
												"0": "101831",
												"1": "1404",
												"2": "1"
											},
											{
												"0": "101038",
												"1": "1962",
												"2": "1"
											},
											{
												"0": "101835",
												"1": "2703",
												"2": "1"
											},
											{
												"0": "101034",
												"1": "3840",
												"2": "1"
											},
											{
												"0": "101835",
												"1": "1677",
												"2": "1"
											},
											{
												"0": "101045",
												"1": "2693",
												"2": "1"
											},
											{
												"0": "101838",
												"1": "2981",
												"2": "1"
											},
											{
												"0": "101060",
												"1": "1853",
												"2": "1"
											},
											{
												"0": "101842",
												"1": "826",
												"2": "1"
											},
											{
												"0": "101083",
												"1": "4415",
												"2": "1"
											},
											{
												"0": "101858",
												"1": "3274",
												"2": "1"
											},
											{
												"0": "101121",
												"1": "4989",
												"2": "1"
											},
											{
												"0": "101859",
												"1": "1412",
												"2": "1"
											},
											{
												"0": "101143",
												"1": "4040",
												"2": "1"
											},
											{
												"0": "101865",
												"1": "2207",
												"2": "1"
											},
											{
												"0": "101157",
												"1": "4247",
												"2": "1"
											},
											{
												"0": "101876",
												"1": "4026",
												"2": "1"
											},
											{
												"0": "101177",
												"1": "1895",
												"2": "1"
											},
											{
												"0": "101878",
												"1": "937",
												"2": "1"
											},
											{
												"0": "101185",
												"1": "383",
												"2": "1"
											},
											{
												"0": "101890",
												"1": "2764",
												"2": "1"
											},
											{
												"0": "101225",
												"1": "1853",
												"2": "1"
											},
											{
												"0": "101890",
												"1": "3262",
												"2": "1"
											},
											{
												"0": "101242",
												"1": "4440",
												"2": "1"
											},
											{
												"0": "101901",
												"1": "2511",
												"2": "1"
											},
											{
												"0": "101269",
												"1": "2277",
												"2": "1"
											},
											{
												"0": "101901",
												"1": "3302",
												"2": "1"
											},
											{
												"0": "101288",
												"1": "4723",
												"2": "1"
											},
											{
												"0": "101910",
												"1": "168",
												"2": "1"
											},
											{
												"0": "101297",
												"1": "1737",
												"2": "1"
											},
											{
												"0": "101912",
												"1": "1876",
												"2": "1"
											},
											{
												"0": "101327",
												"1": "644",
												"2": "1"
											},
											{
												"0": "101923",
												"1": "4198",
												"2": "1"
											},
											{
												"0": "101790",
												"1": "1467",
												"2": "1"
											},
											{
												"0": "101935",
												"1": "4056",
												"2": "1"
											},
											{
												"0": "101359",
												"1": "1384",
												"2": "1"
											},
											{
												"0": "101938",
												"1": "3473",
												"2": "1"
											},
											{
												"0": "101383",
												"1": "2217",
												"2": "1"
											},
											{
												"0": "101951",
												"1": "431",
												"2": "1"
											},
											{
												"0": "101412",
												"1": "3287",
												"2": "1"
											},
											{
												"0": "101965",
												"1": "1153",
												"2": "1"
											},
											{
												"0": "101438",
												"1": "2392",
												"2": "1"
											},
											{
												"0": "101983",
												"1": "66",
												"2": "1"
											},
											{
												"0": "101466",
												"1": "4630",
												"2": "1"
											},
											{
												"0": "102006",
												"1": "3884",
												"2": "1"
											},
											{
												"0": "101499",
												"1": "932",
												"2": "1"
											},
											{
												"0": "102031",
												"1": "2984",
												"2": "1"
											},
											{
												"0": "101519",
												"1": "2718",
												"2": "1"
											},
											{
												"0": "102038",
												"1": "3384",
												"2": "1"
											},
											{
												"0": "101552",
												"1": "1113",
												"2": "1"
											},
											{
												"0": "102062",
												"1": "1143",
												"2": "1"
											},
											{
												"0": "101560",
												"1": "1452",
												"2": "1"
											},
											{
												"0": "102079",
												"1": "4449",
												"2": "1"
											},
											{
												"0": "101572",
												"1": "1330",
												"2": "1"
											},
											{
												"0": "102096",
												"1": "4955",
												"2": "1"
											},
											{
												"0": "101585",
												"1": "3317",
												"2": "1"
											},
											{
												"0": "102096",
												"1": "4936",
												"2": "1"
											},
											{
												"0": "101587",
												"1": "3663",
												"2": "1"
											},
											{
												"0": "102105",
												"1": "3171",
												"2": "1"
											},
											{
												"0": "101592",
												"1": "1286",
												"2": "1"
											},
											{
												"0": "102112",
												"1": "2916",
												"2": "1"
											},
											{
												"0": "101619",
												"1": "1982",
												"2": "1"
											},
											{
												"0": "102120",
												"1": "4255",
												"2": "1"
											},
											{
												"0": "101624",
												"1": "2126",
												"2": "1"
											},
											{
												"0": "102120",
												"1": "543",
												"2": "1"
											},
											{
												"0": "101658",
												"1": "606",
												"2": "1"
											},
											{
												"0": "102138",
												"1": "1937",
												"2": "1"
											},
											{
												"0": "101684",
												"1": "82",
												"2": "1"
											},
											{
												"0": "102144",
												"1": "4990",
												"2": "1"
											},
											{
												"0": "101696",
												"1": "437",
												"2": "1"
											},
											{
												"0": "102158",
												"1": "3430",
												"2": "1"
											},
											{
												"0": "101712",
												"1": "4114",
												"2": "1"
											},
											{
												"0": "102180",
												"1": "819",
												"2": "1"
											},
											{
												"0": "101721",
												"1": "1356",
												"2": "1"
											},
											{
												"0": "102204",
												"1": "697",
												"2": "1"
											},
											{
												"0": "101726",
												"1": "105",
												"2": "1"
											},
											{
												"0": "102206",
												"1": "986",
												"2": "1"
											},
											{
												"0": "101759",
												"1": "796",
												"2": "1"
											},
											{
												"0": "102212",
												"1": "1165",
												"2": "1"
											},
											{
												"0": "101789",
												"1": "4732",
												"2": "1"
											},
											{
												"0": "102228",
												"1": "3509",
												"2": "1"
											},
											{
												"0": "102311",
												"1": "536",
												"2": "1"
											},
											{
												"0": "102333",
												"1": "3924",
												"2": "1"
											},
											{
												"0": "101003",
												"1": "1823",
												"2": "1"
											},
											{
												"0": "102334",
												"1": "4714",
												"2": "1"
											},
											{
												"0": "101031",
												"1": "4784",
												"2": "1"
											},
											{
												"0": "102335",
												"1": "4322",
												"2": "1"
											},
											{
												"0": "101051",
												"1": "3236",
												"2": "1"
											},
											{
												"0": "102344",
												"1": "2944",
												"2": "1"
											},
											{
												"0": "101096",
												"1": "2361",
												"2": "1"
											},
											{
												"0": "102364",
												"1": "2850",
												"2": "1"
											},
											{
												"0": "101339",
												"1": "3863",
												"2": "1"
											},
											{
												"0": "102364",
												"1": "4526",
												"2": "1"
											},
											{
												"0": "101184",
												"1": "512",
												"2": "1"
											},
											{
												"0": "102367",
												"1": "217",
												"2": "1"
											},
											{
												"0": "101230",
												"1": "4447",
												"2": "1"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"577538ed-a492-4ca9-adf6-72c56c2225c3": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "101939",
												"1": "4398",
												"2": "99"
											},
											{
												"0": "102925",
												"1": "758",
												"2": "99"
											},
											{
												"0": "101962",
												"1": "1369",
												"2": "99"
											},
											{
												"0": "101012",
												"1": "4603",
												"2": "99"
											},
											{
												"0": "101966",
												"1": "1949",
												"2": "99"
											},
											{
												"0": "101091",
												"1": "4846",
												"2": "99"
											},
											{
												"0": "101966",
												"1": "2493",
												"2": "99"
											},
											{
												"0": "101111",
												"1": "4732",
												"2": "99"
											},
											{
												"0": "101983",
												"1": "1158",
												"2": "99"
											},
											{
												"0": "101122",
												"1": "4663",
												"2": "99"
											},
											{
												"0": "101989",
												"1": "409",
												"2": "99"
											},
											{
												"0": "101155",
												"1": "3343",
												"2": "99"
											},
											{
												"0": "101990",
												"1": "835",
												"2": "99"
											},
											{
												"0": "101159",
												"1": "2988",
												"2": "99"
											},
											{
												"0": "101991",
												"1": "531",
												"2": "99"
											},
											{
												"0": "101202",
												"1": "3120",
												"2": "99"
											},
											{
												"0": "102002",
												"1": "4182",
												"2": "99"
											},
											{
												"0": "101223",
												"1": "3364",
												"2": "99"
											},
											{
												"0": "102004",
												"1": "4300",
												"2": "99"
											},
											{
												"0": "101252",
												"1": "4690",
												"2": "99"
											},
											{
												"0": "102006",
												"1": "3837",
												"2": "99"
											},
											{
												"0": "101302",
												"1": "4152",
												"2": "99"
											},
											{
												"0": "102013",
												"1": "1334",
												"2": "99"
											},
											{
												"0": "101325",
												"1": "855",
												"2": "99"
											},
											{
												"0": "102013",
												"1": "1575",
												"2": "99"
											},
											{
												"0": "101347",
												"1": "25",
												"2": "99"
											},
											{
												"0": "102014",
												"1": "287",
												"2": "99"
											},
											{
												"0": "101357",
												"1": "4171",
												"2": "99"
											},
											{
												"0": "102020",
												"1": "4882",
												"2": "99"
											},
											{
												"0": "101393",
												"1": "1265",
												"2": "99"
											},
											{
												"0": "102024",
												"1": "4791",
												"2": "99"
											},
											{
												"0": "101452",
												"1": "1788",
												"2": "99"
											},
											{
												"0": "102026",
												"1": "903",
												"2": "99"
											},
											{
												"0": "101477",
												"1": "13",
												"2": "99"
											},
											{
												"0": "102032",
												"1": "4207",
												"2": "99"
											},
											{
												"0": "101486",
												"1": "2121",
												"2": "99"
											},
											{
												"0": "102059",
												"1": "1098",
												"2": "99"
											},
											{
												"0": "101490",
												"1": "262",
												"2": "99"
											},
											{
												"0": "102063",
												"1": "1768",
												"2": "99"
											},
											{
												"0": "101504",
												"1": "4632",
												"2": "99"
											},
											{
												"0": "102069",
												"1": "4098",
												"2": "99"
											},
											{
												"0": "101537",
												"1": "2211",
												"2": "99"
											},
											{
												"0": "102089",
												"1": "4957",
												"2": "99"
											},
											{
												"0": "101564",
												"1": "2269",
												"2": "99"
											},
											{
												"0": "102096",
												"1": "2206",
												"2": "99"
											},
											{
												"0": "101577",
												"1": "1186",
												"2": "99"
											},
											{
												"0": "102111",
												"1": "3631",
												"2": "99"
											},
											{
												"0": "101600",
												"1": "4773",
												"2": "99"
											},
											{
												"0": "102123",
												"1": "4104",
												"2": "99"
											},
											{
												"0": "101608",
												"1": "4006",
												"2": "99"
											},
											{
												"0": "102130",
												"1": "4185",
												"2": "99"
											},
											{
												"0": "101623",
												"1": "4341",
												"2": "99"
											},
											{
												"0": "102153",
												"1": "2325",
												"2": "99"
											},
											{
												"0": "101641",
												"1": "2165",
												"2": "99"
											},
											{
												"0": "102172",
												"1": "3035",
												"2": "99"
											},
											{
												"0": "101664",
												"1": "1251",
												"2": "99"
											},
											{
												"0": "102201",
												"1": "1596",
												"2": "99"
											},
											{
												"0": "101677",
												"1": "4250",
												"2": "99"
											},
											{
												"0": "102203",
												"1": "1142",
												"2": "99"
											},
											{
												"0": "101692",
												"1": "3546",
												"2": "99"
											},
											{
												"0": "102209",
												"1": "1435",
												"2": "99"
											},
											{
												"0": "101699",
												"1": "3461",
												"2": "99"
											},
											{
												"0": "102210",
												"1": "1701",
												"2": "99"
											},
											{
												"0": "101711",
												"1": "566",
												"2": "99"
											},
											{
												"0": "102225",
												"1": "3208",
												"2": "99"
											},
											{
												"0": "101738",
												"1": "2956",
												"2": "99"
											},
											{
												"0": "102225",
												"1": "2752",
												"2": "99"
											},
											{
												"0": "101767",
												"1": "2658",
												"2": "99"
											},
											{
												"0": "102248",
												"1": "2200",
												"2": "99"
											},
											{
												"0": "101796",
												"1": "3720",
												"2": "99"
											},
											{
												"0": "102261",
												"1": "3410",
												"2": "99"
											},
											{
												"0": "101837",
												"1": "1824",
												"2": "99"
											},
											{
												"0": "102265",
												"1": "566",
												"2": "99"
											},
											{
												"0": "101847",
												"1": "1876",
												"2": "99"
											},
											{
												"0": "102276",
												"1": "2386",
												"2": "99"
											},
											{
												"0": "101879",
												"1": "1679",
												"2": "99"
											},
											{
												"0": "102289",
												"1": "2680",
												"2": "99"
											},
											{
												"0": "101885",
												"1": "1190",
												"2": "99"
											},
											{
												"0": "102297",
												"1": "2659",
												"2": "99"
											},
											{
												"0": "101906",
												"1": "3758",
												"2": "99"
											},
											{
												"0": "102298",
												"1": "3422",
												"2": "99"
											},
											{
												"0": "102379",
												"1": "4134",
												"2": "99"
											},
											{
												"0": "102380",
												"1": "1184",
												"2": "99"
											},
											{
												"0": "101178",
												"1": "3204",
												"2": "99"
											},
											{
												"0": "102387",
												"1": "1908",
												"2": "99"
											},
											{
												"0": "101095",
												"1": "1986",
												"2": "99"
											},
											{
												"0": "102393",
												"1": "209",
												"2": "99"
											},
											{
												"0": "101143",
												"1": "2416",
												"2": "99"
											},
											{
												"0": "102405",
												"1": "642",
												"2": "99"
											},
											{
												"0": "101160",
												"1": "1336",
												"2": "99"
											},
											{
												"0": "102418",
												"1": "2337",
												"2": "99"
											},
											{
												"0": "101242",
												"1": "2549",
												"2": "99"
											},
											{
												"0": "102442",
												"1": "4806",
												"2": "99"
											},
											{
												"0": "101325",
												"1": "3579",
												"2": "99"
											},
											{
												"0": "102458",
												"1": "2671",
												"2": "99"
											},
											{
												"0": "101349",
												"1": "1175",
												"2": "99"
											},
											{
												"0": "102470",
												"1": "3389",
												"2": "99"
											},
											{
												"0": "101400",
												"1": "2257",
												"2": "99"
											},
											{
												"0": "102486",
												"1": "2900",
												"2": "99"
											},
											{
												"0": "101481",
												"1": "1375",
												"2": "99"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"50774fa1-2dce-483b-9832-a2ee634d0267": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80000",
												"1": "20"
											},
											{
												"0": "80001",
												"1": "20"
											},
											{
												"0": "80002",
												"1": "15"
											},
											{
												"0": "80003",
												"1": "12"
											},
											{
												"0": "80004",
												"1": "10"
											},
											{
												"0": "80005",
												"1": "13"
											},
											{
												"0": "80006",
												"1": "6"
											},
											{
												"0": "80007",
												"1": "18"
											},
											{
												"0": "80008",
												"1": "4"
											},
											{
												"0": "80009",
												"1": "16"
											},
											{
												"0": "80010",
												"1": "3"
											},
											{
												"0": "80011",
												"1": "17"
											},
											{
												"0": "80012",
												"1": "19"
											},
											{
												"0": "80013",
												"1": "6"
											},
											{
												"0": "80014",
												"1": "20"
											},
											{
												"0": "80015",
												"1": "12"
											},
											{
												"0": "80016",
												"1": "6"
											},
											{
												"0": "80017",
												"1": "1"
											},
											{
												"0": "80018",
												"1": "17"
											},
											{
												"0": "80019",
												"1": "14"
											},
											{
												"0": "80020",
												"1": "9"
											},
											{
												"0": "80021",
												"1": "18"
											},
											{
												"0": "80022",
												"1": "13"
											},
											{
												"0": "80023",
												"1": "10"
											},
											{
												"0": "80024",
												"1": "4"
											},
											{
												"0": "80025",
												"1": "13"
											},
											{
												"0": "80026",
												"1": "19"
											},
											{
												"0": "80027",
												"1": "13"
											},
											{
												"0": "80028",
												"1": "1"
											},
											{
												"0": "80029",
												"1": "4"
											},
											{
												"0": "80030",
												"1": "1"
											},
											{
												"0": "80031",
												"1": "9"
											},
											{
												"0": "80032",
												"1": "17"
											},
											{
												"0": "80033",
												"1": "8"
											},
											{
												"0": "80034",
												"1": "14"
											},
											{
												"0": "80035",
												"1": "11"
											},
											{
												"0": "80036",
												"1": "19"
											},
											{
												"0": "80037",
												"1": "10"
											},
											{
												"0": "80038",
												"1": "3"
											},
											{
												"0": "80039",
												"1": "4"
											},
											{
												"0": "80040",
												"1": "17"
											},
											{
												"0": "80041",
												"1": "6"
											},
											{
												"0": "80042",
												"1": "9"
											},
											{
												"0": "80043",
												"1": "2"
											},
											{
												"0": "80044",
												"1": "19"
											},
											{
												"0": "80045",
												"1": "6"
											},
											{
												"0": "80046",
												"1": "17"
											},
											{
												"0": "80047",
												"1": "4"
											},
											{
												"0": "80048",
												"1": "13"
											},
											{
												"0": "80049",
												"1": "16"
											},
											{
												"0": "80050",
												"1": "5"
											},
											{
												"0": "80051",
												"1": "17"
											},
											{
												"0": "80052",
												"1": "9"
											},
											{
												"0": "80053",
												"1": "4"
											},
											{
												"0": "80054",
												"1": "10"
											},
											{
												"0": "80055",
												"1": "18"
											},
											{
												"0": "80056",
												"1": "13"
											},
											{
												"0": "80057",
												"1": "9"
											},
											{
												"0": "80058",
												"1": "3"
											},
											{
												"0": "80059",
												"1": "14"
											},
											{
												"0": "80060",
												"1": "4"
											},
											{
												"0": "80061",
												"1": "6"
											},
											{
												"0": "80062",
												"1": "19"
											},
											{
												"0": "80063",
												"1": "3"
											},
											{
												"0": "80064",
												"1": "3"
											},
											{
												"0": "80066",
												"1": "4"
											},
											{
												"0": "80067",
												"1": "6"
											},
											{
												"0": "80068",
												"1": "5"
											},
											{
												"0": "80069",
												"1": "11"
											},
											{
												"0": "80070",
												"1": "8"
											},
											{
												"0": "80071",
												"1": "8"
											},
											{
												"0": "80072",
												"1": "5"
											},
											{
												"0": "80073",
												"1": "14"
											},
											{
												"0": "80074",
												"1": "12"
											},
											{
												"0": "80075",
												"1": "7"
											},
											{
												"0": "80076",
												"1": "12"
											},
											{
												"0": "80077",
												"1": "1"
											},
											{
												"0": "80078",
												"1": "6"
											},
											{
												"0": "80079",
												"1": "4"
											},
											{
												"0": "80080",
												"1": "19"
											},
											{
												"0": "80081",
												"1": "14"
											},
											{
												"0": "80082",
												"1": "15"
											},
											{
												"0": "80083",
												"1": "12"
											},
											{
												"0": "80084",
												"1": "5"
											},
											{
												"0": "80086",
												"1": "7"
											},
											{
												"0": "80087",
												"1": "1"
											},
											{
												"0": "80088",
												"1": "2"
											},
											{
												"0": "80089",
												"1": "9"
											},
											{
												"0": "80090",
												"1": "1"
											},
											{
												"0": "80091",
												"1": "10"
											},
											{
												"0": "80092",
												"1": "11"
											},
											{
												"0": "80093",
												"1": "6"
											},
											{
												"0": "80094",
												"1": "19"
											},
											{
												"0": "80095",
												"1": "1"
											},
											{
												"0": "80096",
												"1": "19"
											},
											{
												"0": "80097",
												"1": "19"
											},
											{
												"0": "80098",
												"1": "15"
											},
											{
												"0": "80099",
												"1": "8"
											},
											{
												"0": "80100",
												"1": "11"
											},
											{
												"0": "80101",
												"1": "6"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "total",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"d12c8d91-7104-422e-b2da-3c159656c0a9": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80000",
												"1": "1054"
											},
											{
												"0": "80001",
												"1": "834"
											},
											{
												"0": "80002",
												"1": "754"
											},
											{
												"0": "80003",
												"1": "684"
											},
											{
												"0": "80004",
												"1": "598"
											},
											{
												"0": "80005",
												"1": "615"
											},
											{
												"0": "80006",
												"1": "348"
											},
											{
												"0": "80007",
												"1": "932"
											},
											{
												"0": "80008",
												"1": "199"
											},
											{
												"0": "80009",
												"1": "787"
											},
											{
												"0": "80010",
												"1": "97"
											},
											{
												"0": "80011",
												"1": "931"
											},
											{
												"0": "80012",
												"1": "1042"
											},
											{
												"0": "80013",
												"1": "313"
											},
											{
												"0": "80014",
												"1": "1084"
											},
											{
												"0": "80015",
												"1": "496"
											},
											{
												"0": "80016",
												"1": "429"
											},
											{
												"0": "80017",
												"1": "76"
											},
											{
												"0": "80018",
												"1": "733"
											},
											{
												"0": "80019",
												"1": "743"
											},
											{
												"0": "80020",
												"1": "502"
											},
											{
												"0": "80021",
												"1": "921"
											},
											{
												"0": "80022",
												"1": "662"
											},
											{
												"0": "80023",
												"1": "461"
											},
											{
												"0": "80024",
												"1": "143"
											},
											{
												"0": "80025",
												"1": "747"
											},
											{
												"0": "80026",
												"1": "909"
											},
											{
												"0": "80027",
												"1": "681"
											},
											{
												"0": "80028",
												"1": "72"
											},
											{
												"0": "80029",
												"1": "227"
											},
											{
												"0": "80030",
												"1": "4"
											},
											{
												"0": "80031",
												"1": "654"
											},
											{
												"0": "80032",
												"1": "877"
											},
											{
												"0": "80033",
												"1": "331"
											},
											{
												"0": "80034",
												"1": "651"
											},
											{
												"0": "80035",
												"1": "496"
											},
											{
												"0": "80036",
												"1": "1045"
											},
											{
												"0": "80037",
												"1": "476"
											},
											{
												"0": "80038",
												"1": "139"
											},
											{
												"0": "80039",
												"1": "211"
											},
											{
												"0": "80040",
												"1": "913"
											},
											{
												"0": "80041",
												"1": "290"
											},
											{
												"0": "80042",
												"1": "427"
											},
											{
												"0": "80043",
												"1": "24"
											},
											{
												"0": "80044",
												"1": "728"
											},
											{
												"0": "80045",
												"1": "314"
											},
											{
												"0": "80046",
												"1": "613"
											},
											{
												"0": "80047",
												"1": "194"
											},
											{
												"0": "80048",
												"1": "708"
											},
											{
												"0": "80049",
												"1": "981"
											},
											{
												"0": "80050",
												"1": "234"
											},
											{
												"0": "80051",
												"1": "788"
											},
											{
												"0": "80052",
												"1": "395"
											},
											{
												"0": "80053",
												"1": "234"
											},
											{
												"0": "80054",
												"1": "391"
											},
											{
												"0": "80055",
												"1": "1137"
											},
											{
												"0": "80056",
												"1": "440"
											},
											{
												"0": "80057",
												"1": "474"
											},
											{
												"0": "80058",
												"1": "50"
											},
											{
												"0": "80059",
												"1": "677"
											},
											{
												"0": "80060",
												"1": "158"
											},
											{
												"0": "80061",
												"1": "212"
											},
											{
												"0": "80062",
												"1": "1009"
											},
											{
												"0": "80063",
												"1": "113"
											},
											{
												"0": "80064",
												"1": "132"
											},
											{
												"0": "80066",
												"1": "141"
											},
											{
												"0": "80067",
												"1": "381"
											},
											{
												"0": "80068",
												"1": "329"
											},
											{
												"0": "80069",
												"1": "524"
											},
											{
												"0": "80070",
												"1": "422"
											},
											{
												"0": "80071",
												"1": "322"
											},
											{
												"0": "80072",
												"1": "352"
											},
											{
												"0": "80073",
												"1": "770"
											},
											{
												"0": "80074",
												"1": "398"
											},
											{
												"0": "80075",
												"1": "185"
											},
											{
												"0": "80076",
												"1": "425"
											},
											{
												"0": "80077",
												"1": "84"
											},
											{
												"0": "80078",
												"1": "383"
											},
											{
												"0": "80079",
												"1": "250"
											},
											{
												"0": "80080",
												"1": "946"
											},
											{
												"0": "80081",
												"1": "540"
											},
											{
												"0": "80082",
												"1": "566"
											},
											{
												"0": "80083",
												"1": "726"
											},
											{
												"0": "80084",
												"1": "257"
											},
											{
												"0": "80086",
												"1": "270"
											},
											{
												"0": "80087",
												"1": "20"
											},
											{
												"0": "80088",
												"1": "27"
											},
											{
												"0": "80089",
												"1": "488"
											},
											{
												"0": "80090",
												"1": "34"
											},
											{
												"0": "80091",
												"1": "314"
											},
											{
												"0": "80092",
												"1": "535"
											},
											{
												"0": "80093",
												"1": "279"
											},
											{
												"0": "80094",
												"1": "937"
											},
											{
												"0": "80095",
												"1": "42"
											},
											{
												"0": "80096",
												"1": "807"
											},
											{
												"0": "80097",
												"1": "984"
											},
											{
												"0": "80098",
												"1": "744"
											},
											{
												"0": "80099",
												"1": "375"
											},
											{
												"0": "80100",
												"1": "510"
											},
											{
												"0": "80101",
												"1": "222"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "totalItemsPurchased",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"2f8db5e4-0d56-4fca-be65-16fc658e5ddc": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "820",
												"3": 2,
												"4": "33.280000000000000000",
												"5": "66.560000000000000000",
												"6": "20191204",
												"7": "22.660000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "1370",
												"3": 2,
												"4": "26.660000000000000000",
												"5": "53.320000000000000000",
												"6": "20191204",
												"7": "16.580000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "3071",
												"3": 1,
												"4": "39.220000000000000000",
												"5": "39.220000000000000000",
												"6": "20191204",
												"7": "12.380000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "3460",
												"3": 4,
												"4": "30.840000000000000000",
												"5": "123.360000000000000000",
												"6": "20191204",
												"7": "42.720000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "2975",
												"3": 1,
												"4": "33.240000000000000000",
												"5": "33.240000000000000000",
												"6": "20191204",
												"7": "11.190000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "4889",
												"3": 2,
												"4": "32.020000000000000000",
												"5": "64.040000000000000000",
												"6": "20191204",
												"7": "20.200000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "2333",
												"3": 1,
												"4": "19.220000000000000000",
												"5": "19.220000000000000000",
												"6": "20191204",
												"7": "5.540000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "105",
												"3": 1,
												"4": "34.360000000000000000",
												"5": "34.360000000000000000",
												"6": "20191204",
												"7": "10.510000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "6",
												"3": 1,
												"4": "28.310000000000000000",
												"5": "28.310000000000000000",
												"6": "20191204",
												"7": "8.770000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											},
											{
												"0": "7bcfb8f0-d3ec-4fa9-b1b3-6d46f05920f5",
												"1": "2",
												"2": "144",
												"3": 3,
												"4": "30.480000000000000000",
												"5": "91.440000000000000000",
												"6": "20191204",
												"7": "24.270000000000000000",
												"8": 6,
												"9": 2,
												"10": "92"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "TransactionId",
												"type": "string"
											},
											{
												"key": "1",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "2",
												"name": "ProductId",
												"type": "smallint"
											},
											{
												"key": "3",
												"name": "Quantity",
												"type": "tinyint"
											},
											{
												"key": "4",
												"name": "Price",
												"type": "decimal"
											},
											{
												"key": "5",
												"name": "TotalAmount",
												"type": "decimal"
											},
											{
												"key": "6",
												"name": "TransactionDate",
												"type": "int"
											},
											{
												"key": "7",
												"name": "ProfitAmount",
												"type": "decimal"
											},
											{
												"key": "8",
												"name": "Hour",
												"type": "tinyint"
											},
											{
												"key": "9",
												"name": "Minute",
												"type": "tinyint"
											},
											{
												"key": "10",
												"name": "StoreId",
												"type": "smallint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"0"
											],
											"seriesFieldKeys": [
												"1"
											],
											"isStacked": false
										}
									}
								}
							},
							"8ced192d-345e-41d1-b5a6-7da83bf1838c": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "106467",
												"1": "2575",
												"2": "90"
											},
											{
												"0": "106467",
												"1": "244",
												"2": "66"
											},
											{
												"0": "106467",
												"1": "446",
												"2": "71"
											},
											{
												"0": "106467",
												"1": "1179",
												"2": "85"
											},
											{
												"0": "106467",
												"1": "1383",
												"2": "31"
											},
											{
												"0": "106467",
												"1": "1072",
												"2": "57"
											},
											{
												"0": "106468",
												"1": "1478",
												"2": "7"
											},
											{
												"0": "106468",
												"1": "953",
												"2": "29"
											},
											{
												"0": "106468",
												"1": "986",
												"2": "45"
											},
											{
												"0": "106468",
												"1": "2660",
												"2": "87"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "visitorId",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "itemsPurchasedLast12Months",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							},
							"48bb688f-891f-44e7-ac5b-3813eb203e2e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "80034",
												"1": "70",
												"2": "34.320000000000000000",
												"3": "1",
												"4": "73"
											},
											{
												"0": "80097",
												"1": "1160",
												"2": "105.040000000000000000",
												"3": "4",
												"4": "46"
											},
											{
												"0": "80126",
												"1": "30",
												"2": "62.400000000000000000",
												"3": "3",
												"4": "95"
											},
											{
												"0": "80145",
												"1": "4475",
												"2": "21.660000000000000000",
												"3": "1",
												"4": "40"
											},
											{
												"0": "80167",
												"1": "4097",
												"2": "69.990000000000000000",
												"3": "3",
												"4": "23"
											},
											{
												"0": "80168",
												"1": "169",
												"2": "77.580000000000000000",
												"3": "2",
												"4": "45"
											},
											{
												"0": "80177",
												"1": "3593",
												"2": "64.060000000000000000",
												"3": "2",
												"4": "97"
											},
											{
												"0": "80227",
												"1": "2169",
												"2": "19.270000000000000000",
												"3": "1",
												"4": "43"
											},
											{
												"0": "80228",
												"1": "1764",
												"2": "23.220000000000000000",
												"3": "1",
												"4": "80"
											},
											{
												"0": "80233",
												"1": "1413",
												"2": "79.620000000000000000",
												"3": "3",
												"4": "74"
											},
											{
												"0": "80237",
												"1": "516",
												"2": "111.160000000000000000",
												"3": "4",
												"4": "98"
											},
											{
												"0": "80246",
												"1": "3533",
												"2": "66.420000000000000000",
												"3": "2",
												"4": "95"
											},
											{
												"0": "80247",
												"1": "925",
												"2": "94.020000000000000000",
												"3": "3",
												"4": "38"
											},
											{
												"0": "80253",
												"1": "2637",
												"2": "13.690000000000000000",
												"3": "1",
												"4": "14"
											},
											{
												"0": "80268",
												"1": "104",
												"2": "105.690000000000000000",
												"3": "3",
												"4": "54"
											},
											{
												"0": "80270",
												"1": "4288",
												"2": "228.970000000000000000",
												"3": "7",
												"4": "108"
											},
											{
												"0": "80283",
												"1": "31",
												"2": "44.300000000000000000",
												"3": "2",
												"4": "20"
											},
											{
												"0": "80296",
												"1": "202",
												"2": "96.920000000000000000",
												"3": "4",
												"4": "52"
											},
											{
												"0": "80318",
												"1": "169",
												"2": "155.160000000000000000",
												"3": "4",
												"4": "61"
											},
											{
												"0": "80331",
												"1": "162",
												"2": "64.420000000000000000",
												"3": "2",
												"4": "81"
											},
											{
												"0": "80347",
												"1": "4232",
												"2": "48.860000000000000000",
												"3": "2",
												"4": "89"
											},
											{
												"0": "80351",
												"1": "244",
												"2": "83.960000000000000000",
												"3": "4",
												"4": "83"
											},
											{
												"0": "80390",
												"1": "234",
												"2": "128.280000000000000000",
												"3": "4",
												"4": "72"
											},
											{
												"0": "80391",
												"1": "2942",
												"2": "29.410000000000000000",
												"3": "1",
												"4": "26"
											},
											{
												"0": "80394",
												"1": "3530",
												"2": "102.930000000000000000",
												"3": "3",
												"4": "65"
											},
											{
												"0": "80412",
												"1": "3103",
												"2": "153.520000000000000000",
												"3": "4",
												"4": "24"
											},
											{
												"0": "80418",
												"1": "2280",
												"2": "67.040000000000000000",
												"3": "4",
												"4": "12"
											},
											{
												"0": "80432",
												"1": "3040",
												"2": "125.480000000000000000",
												"3": "4",
												"4": "19"
											},
											{
												"0": "80450",
												"1": "31",
												"2": "88.600000000000000000",
												"3": "4",
												"4": "67"
											},
											{
												"0": "80450",
												"1": "4069",
												"2": "58.320000000000000000",
												"3": "2",
												"4": "43"
											},
											{
												"0": "80460",
												"1": "64",
												"2": "93.840000000000000000",
												"3": "3",
												"4": "25"
											},
											{
												"0": "80477",
												"1": "46",
												"2": "25.910000000000000000",
												"3": "1",
												"4": "54"
											},
											{
												"0": "80506",
												"1": "3652",
												"2": "214.860000000000000000",
												"3": "6",
												"4": "50"
											},
											{
												"0": "80572",
												"1": "3833",
												"2": "144.240000000000000000",
												"3": "4",
												"4": "90"
											},
											{
												"0": "80606",
												"1": "1904",
												"2": "77.700000000000000000",
												"3": "3",
												"4": "74"
											},
											{
												"0": "80648",
												"1": "4903",
												"2": "146.940000000000000000",
												"3": "6",
												"4": "2"
											},
											{
												"0": "80659",
												"1": "2433",
												"2": "45.520000000000000000",
												"3": "2",
												"4": "63"
											},
											{
												"0": "80682",
												"1": "236",
												"2": "100.960000000000000000",
												"3": "4",
												"4": "75"
											},
											{
												"0": "80705",
												"1": "241",
												"2": "53.120000000000000000",
												"3": "2",
												"4": "31"
											},
											{
												"0": "80707",
												"1": "253",
												"2": "77.960000000000000000",
												"3": "4",
												"4": "57"
											},
											{
												"0": "80766",
												"1": "4333",
												"2": "105.900000000000000000",
												"3": "3",
												"4": "1"
											},
											{
												"0": "80769",
												"1": "122",
												"2": "54.020000000000000000",
												"3": "2",
												"4": "96"
											},
											{
												"0": "80769",
												"1": "1743",
												"2": "64.650000000000000000",
												"3": "3",
												"4": "71"
											},
											{
												"0": "80781",
												"1": "4617",
												"2": "109.720000000000000000",
												"3": "4",
												"4": "46"
											},
											{
												"0": "80801",
												"1": "2720",
												"2": "99.090000000000000000",
												"3": "3",
												"4": "120"
											},
											{
												"0": "80821",
												"1": "2478",
												"2": "21.950000000000000000",
												"3": "1",
												"4": "18"
											},
											{
												"0": "80848",
												"1": "1884",
												"2": "24.310000000000000000",
												"3": "1",
												"4": "30"
											},
											{
												"0": "80850",
												"1": "1980",
												"2": "356.720000000000000000",
												"3": "14",
												"4": "84"
											},
											{
												"0": "80867",
												"1": "3986",
												"2": "34.640000000000000000",
												"3": "1",
												"4": "44"
											},
											{
												"0": "80877",
												"1": "105",
												"2": "137.440000000000000000",
												"3": "4",
												"4": "70"
											},
											{
												"0": "80907",
												"1": "186",
												"2": "95.440000000000000000",
												"3": "4",
												"4": "25"
											},
											{
												"0": "80911",
												"1": "102",
												"2": "46.100000000000000000",
												"3": "2",
												"4": "22"
											},
											{
												"0": "80922",
												"1": "963",
												"2": "100.680000000000000000",
												"3": "4",
												"4": "51"
											},
											{
												"0": "80966",
												"1": "134",
												"2": "58.320000000000000000",
												"3": "2",
												"4": "85"
											},
											{
												"0": "81009",
												"1": "4662",
												"2": "36.400000000000000000",
												"3": "1",
												"4": "53"
											},
											{
												"0": "81024",
												"1": "166",
												"2": "24.790000000000000000",
												"3": "1",
												"4": "72"
											},
											{
												"0": "81026",
												"1": "169",
												"2": "77.580000000000000000",
												"3": "2",
												"4": "2"
											},
											{
												"0": "81027",
												"1": "2158",
												"2": "43.460000000000000000",
												"3": "2",
												"4": "54"
											},
											{
												"0": "81029",
												"1": "2801",
												"2": "26.410000000000000000",
												"3": "1",
												"4": "79"
											},
											{
												"0": "81030",
												"1": "153",
												"2": "27.430000000000000000",
												"3": "1",
												"4": "99"
											},
											{
												"0": "81035",
												"1": "4097",
												"2": "93.320000000000000000",
												"3": "4",
												"4": "87"
											},
											{
												"0": "81121",
												"1": "167",
												"2": "28.690000000000000000",
												"3": "1",
												"4": "81"
											},
											{
												"0": "81149",
												"1": "180",
												"2": "103.240000000000000000",
												"3": "4",
												"4": "19"
											},
											{
												"0": "81180",
												"1": "109",
												"2": "311.880000000000000000",
												"3": "12",
												"4": "75"
											},
											{
												"0": "81182",
												"1": "606",
												"2": "73.230000000000000000",
												"3": "3",
												"4": "87"
											},
											{
												"0": "81199",
												"1": "32",
												"2": "76.200000000000000000",
												"3": "2",
												"4": "80"
											},
											{
												"0": "81220",
												"1": "183",
												"2": "135.840000000000000000",
												"3": "4",
												"4": "78"
											},
											{
												"0": "81261",
												"1": "243",
												"2": "109.040000000000000000",
												"3": "4",
												"4": "38"
											},
											{
												"0": "81270",
												"1": "4583",
												"2": "111.120000000000000000",
												"3": "4",
												"4": "85"
											},
											{
												"0": "81281",
												"1": "1382",
												"2": "160.620000000000000000",
												"3": "6",
												"4": "160"
											},
											{
												"0": "81320",
												"1": "3673",
												"2": "88.040000000000000000",
												"3": "4",
												"4": "86"
											},
											{
												"0": "81331",
												"1": "213",
												"2": "87.210000000000000000",
												"3": "3",
												"4": "23"
											},
											{
												"0": "81349",
												"1": "91",
												"2": "62.500000000000000000",
												"3": "2",
												"4": "48"
											},
											{
												"0": "81352",
												"1": "4744",
												"2": "28.270000000000000000",
												"3": "1",
												"4": "18"
											},
											{
												"0": "81358",
												"1": "1588",
												"2": "80.760000000000000000",
												"3": "4",
												"4": "99"
											},
											{
												"0": "81386",
												"1": "4644",
												"2": "131.760000000000000000",
												"3": "4",
												"4": "59"
											},
											{
												"0": "81387",
												"1": "39",
												"2": "125.920000000000000000",
												"3": "4",
												"4": "34"
											},
											{
												"0": "81397",
												"1": "219",
												"2": "123.000000000000000000",
												"3": "4",
												"4": "42"
											},
											{
												"0": "81407",
												"1": "238",
												"2": "28.090000000000000000",
												"3": "1",
												"4": "97"
											},
											{
												"0": "81407",
												"1": "916",
												"2": "24.540000000000000000",
												"3": "1",
												"4": "96"
											},
											{
												"0": "81423",
												"1": "43",
												"2": "37.480000000000000000",
												"3": "1",
												"4": "69"
											},
											{
												"0": "81428",
												"1": "113",
												"2": "24.990000000000000000",
												"3": "1",
												"4": "8"
											},
											{
												"0": "81435",
												"1": "171",
												"2": "73.500000000000000000",
												"3": "3",
												"4": "53"
											},
											{
												"0": "81465",
												"1": "4072",
												"2": "109.520000000000000000",
												"3": "4",
												"4": "39"
											},
											{
												"0": "81524",
												"1": "49",
												"2": "69.900000000000000000",
												"3": "3",
												"4": "60"
											},
											{
												"0": "81524",
												"1": "604",
												"2": "68.160000000000000000",
												"3": "2",
												"4": "56"
											},
											{
												"0": "81561",
												"1": "93",
												"2": "39.880000000000000000",
												"3": "2",
												"4": "11"
											},
											{
												"0": "81562",
												"1": "1631",
												"2": "144.750000000000000000",
												"3": "5",
												"4": "102"
											},
											{
												"0": "81567",
												"1": "39",
												"2": "94.440000000000000000",
												"3": "3",
												"4": "12"
											},
											{
												"0": "81585",
												"1": "144",
												"2": "60.960000000000000000",
												"3": "2",
												"4": "49"
											},
											{
												"0": "81585",
												"1": "220",
												"2": "82.800000000000000000",
												"3": "3",
												"4": "81"
											},
											{
												"0": "81621",
												"1": "4654",
												"2": "70.180000000000000000",
												"3": "2",
												"4": "75"
											},
											{
												"0": "81633",
												"1": "1370",
												"2": "106.640000000000000000",
												"3": "4",
												"4": "98"
											},
											{
												"0": "81652",
												"1": "703",
												"2": "70.280000000000000000",
												"3": "2",
												"4": "77"
											},
											{
												"0": "81654",
												"1": "393",
												"2": "100.980000000000000000",
												"3": "3",
												"4": "56"
											},
											{
												"0": "81660",
												"1": "44",
												"2": "25.200000000000000000",
												"3": "2",
												"4": "84"
											},
											{
												"0": "81661",
												"1": "65",
												"2": "50.940000000000000000",
												"3": "3",
												"4": "57"
											},
											{
												"0": "81661",
												"1": "4654",
												"2": "35.090000000000000000",
												"3": "1",
												"4": "9"
											},
											{
												"0": "81663",
												"1": "76",
												"2": "69.000000000000000000",
												"3": "3",
												"4": "4"
											},
											{
												"0": "81665",
												"1": "141",
												"2": "44.260000000000000000",
												"3": "2",
												"4": "58"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "CustomerId",
												"type": "int"
											},
											{
												"key": "1",
												"name": "productId",
												"type": "bigint"
											},
											{
												"key": "2",
												"name": "TotalAmountDecember",
												"type": "decimal"
											},
											{
												"key": "3",
												"name": "TotalQuantityDecember",
												"type": "bigint"
											},
											{
												"key": "4",
												"name": "TotalItemsPurchasedLast12Months",
												"type": "bigint"
											}
										]
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3600cd0c-0725-4a38-8ac6-e135b659c5c8/resourceGroups/dp203/providers/Microsoft.Synapse/workspaces/asaworkspacedp203xb/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspacedp203xb.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://wwi-02@asadatalakedp203xb.dfs.core.windows.net/sale-small/Year=2010/Quarter=Q4/Month=12/Day=20101231/sale-small-20101231-snappy.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.types import *\r\n",
							"from pyspark.sql.functions import *\r\n",
							"\r\n",
							"profitByDateProduct = (df.groupBy(\"TransactionDate\",\"ProductId\")\r\n",
							"    .agg(\r\n",
							"        sum(\"ProfitAmount\").alias(\"(sum)ProfitAmount\"),\r\n",
							"        round(avg(\"Quantity\"), 4).alias(\"(avg)Quantity\"),\r\n",
							"        sum(\"Quantity\").alias(\"(sum)Quantity\"))\r\n",
							"    .orderBy(\"TransactionDate\"))\r\n",
							"display(profitByDateProduct.limit(100))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"datalake = 'asadatalakedp203xb'\r\n",
							"df = (spark.read \\\r\n",
							"        .option('inferSchema', 'true') \\\r\n",
							"        .json('abfss://wwi-02@' + datalake + '.dfs.core.windows.net/online-user-profiles-02/*.json', multiLine=True)\r\n",
							"    )\r\n",
							"\r\n",
							"df.printSchema()\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"df.createOrReplaceTempView(\"user_profiles\")\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM user_profiles LIMIT 10\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\r\n",
							"\r\n",
							"flat=df.select('visitorId',explode('topProductPurchases').alias('topProductPurchases_flat'))\r\n",
							"flat.show(100)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"topPurchases = (flat.select('visitorId','topProductPurchases_flat.productId','topProductPurchases_flat.itemsPurchasedLast12Months')\r\n",
							"    .orderBy('visitorId'))\r\n",
							"\r\n",
							"topPurchases.show(100)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Let's order by the number of items purchased in the last 12 months\r\n",
							"sortedTopPurchases = topPurchases.orderBy(\"itemsPurchasedLast12Months\")\r\n",
							"\r\n",
							"display(sortedTopPurchases.limit(100))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"sortedTopPurchases = (topPurchases\r\n",
							"    .orderBy( col(\"itemsPurchasedLast12Months\").desc() ))\r\n",
							"\r\n",
							"display(sortedTopPurchases.limit(100))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(count(\"*\").alias(\"total\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"display(groupedTopPurchases.limit(100))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"groupedTopPurchases = (sortedTopPurchases.select(\"visitorId\",\"itemsPurchasedLast12Months\")\r\n",
							"    .groupBy(\"visitorId\")\r\n",
							"    .agg(sum(\"itemsPurchasedLast12Months\").alias(\"totalItemsPurchased\"))\r\n",
							"    .orderBy(\"visitorId\") )\r\n",
							"\r\n",
							"display(groupedTopPurchases.limit(100))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"# Create a temporary view for top purchases so we can load from Scala\r\n",
							"topPurchases.createOrReplaceTempView(\"top_purchases\")\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"// Make sure the name of the dedcated SQL pool (SQLPool01 below) matches the name of your SQL pool.\r\n",
							"val df = spark.sqlContext.sql(\"select * from top_purchases\")\r\n",
							"df.write.sqlanalytics(\"SQLPool01.wwi.TopPurchases\", Constants.INTERNAL)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"dfsales = spark.read.load('abfss://wwi-02@' + datalake + '.dfs.core.windows.net/sale-small/Year=2019/Quarter=Q4/Month=12/*/*.parquet', format='parquet')\r\n",
							"display(dfsales.limit(10))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"// Make sure the name of the SQL pool (SQLPool01 below) matches the name of your SQL pool.\r\n",
							"val df2 = spark.read.sqlanalytics(\"SQLPool01.wwi.TopPurchases\")\r\n",
							"df2.createTempView(\"top_purchases_sql\")\r\n",
							"\r\n",
							"df2.head(10)\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"dfTopPurchasesFromSql = sqlContext.table(\"top_purchases_sql\")\r\n",
							"\r\n",
							"display(dfTopPurchasesFromSql.limit(10))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"inner_join = dfsales.join(dfTopPurchasesFromSql,\r\n",
							"    (dfsales.CustomerId == dfTopPurchasesFromSql.visitorId) & (dfsales.ProductId == dfTopPurchasesFromSql.productId))\r\n",
							"\r\n",
							"inner_join_agg = (inner_join.select(\"CustomerId\",\"TotalAmount\",\"Quantity\",\"itemsPurchasedLast12Months\",\"top_purchases_sql.productId\")\r\n",
							"    .groupBy([\"CustomerId\",\"top_purchases_sql.productId\"])\r\n",
							"    .agg(\r\n",
							"        sum(\"TotalAmount\").alias(\"TotalAmountDecember\"),\r\n",
							"        sum(\"Quantity\").alias(\"TotalQuantityDecember\"),\r\n",
							"        sum(\"itemsPurchasedLast12Months\").alias(\"TotalItemsPurchasedLast12Months\"))\r\n",
							"    .orderBy(\"CustomerId\") )\r\n",
							"\r\n",
							"display(inner_join_agg.limit(100))\r\n",
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"attachments": null,
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Widget Basics')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3600cd0c-0725-4a38-8ac6-e135b659c5c8/resourceGroups/dp203/providers/Microsoft.Synapse/workspaces/asaworkspacedp203xb/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspacedp203xb.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nbsphinx": "hidden"
						},
						"source": [
							"## Please enable \"Preview Features\"\r\n",
							"**Jupyter Widgets** are not supported in classical notebook experience. Please open a notebook, click the \"Preview Features\" toggle button on the toolbar, then come back to the Sample Center."
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"See https://go.microsoft.com/fwlink/?linkid=2170793 for general introduction as well as known limitations on the Jupyter Widgets support in Synapse Studio."
						],
						"attachments": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cosmos Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3600cd0c-0725-4a38-8ac6-e135b659c5c8/resourceGroups/dp203/providers/Microsoft.Synapse/workspaces/asaworkspacedp203xb/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspacedp203xb.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"_rid"
									],
									"values": [
										"_ts"
									],
									"yLabel": "_ts",
									"xLabel": "_rid",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"_ts\":{\"wTpmANnEtjRklgAAAAAAAA==\":1630821661,\"wTpmANnEtjRllgAAAAAAAA==\":1630821661,\"wTpmANnEtjRmlgAAAAAAAA==\":1630821661,\"wTpmANnEtjRnlgAAAAAAAA==\":1630821661,\"wTpmANnEtjRolgAAAAAAAA==\":1630821661,\"wTpmANnEtjRplgAAAAAAAA==\":1630821661,\"wTpmANnEtjRqlgAAAAAAAA==\":1630821661,\"wTpmANnEtjRrlgAAAAAAAA==\":1630821661,\"wTpmANnEtjRslgAAAAAAAA==\":1630821661,\"wTpmANnEtjRtlgAAAAAAAA==\":1630821661}}",
								"isSummary": false,
								"previewData": {
									"filter": null,
									"table": {
										"rows": [],
										"schema": {}
									}
								},
								"isSql": false
							}
						},
						"source": [
							"# Read from Cosmos DB analytical store into a Spark DataFrame and display 10 rows from the DataFrame\n",
							"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
							"\n",
							"df = spark.read\\\n",
							"    .format(\"cosmos.olap\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"asacosmosdb01\")\\\n",
							"    .option(\"spark.cosmos.container\", \"UserProfileHTAP\")\\\n",
							"    .load()\n",
							"\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read\\\n",
							"    .format(\"cosmos.oltp\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"asacosmosdb01\")\\\n",
							"    .option(\"spark.cosmos.container\", \"UserProfileHTAP\")\\\n",
							"    .load()\n",
							"\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"source": [
							"# dfSalesOrderStatistic = spark.sql(\"SELECT concat(Country,'-',replace(City,' ','')) AS id, \\\n",
							"#                                     'SalesOrderStatistic' AS type, \\\n",
							"#                                     * FROM SalesOrderStatsView\")\n",
							"\n",
							"# dfSalesOrderStatistic.write\\\n",
							"#     .format(\"cosmos.oltp\")\\\n",
							"#     .option(\"spark.synapse.linkedService\", \"AdventureWorksSQL\")\\\n",
							"#     .option(\"spark.cosmos.container\", \"Sales\")\\\n",
							"#     .option(\"spark.cosmos.write.upsertEnabled\", \"true\")\\\n",
							"#     .mode('append')\\\n",
							"#     .save()\n",
							""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"cartId"
									],
									"values": [
										"userId"
									],
									"yLabel": "userId",
									"xLabel": "cartId",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"userId\":{\"12278c93-80e1-4381-92a0-8ff452ed546f\":39415,\"28cf710b-21fa-41fe-b58c-96c90c5382fd\":24626,\"2a78ddfd-febe-4505-9041-4e69dfb8feac\":36496,\"60a383fa-85cf-49f9-863f-53dec45b790e\":35206,\"b530703b-9a19-4896-bbb2-5e7a3767877c\":18680,\"c39935ec-0882-4717-9722-32646d2a0aa1\":23542,\"c87202eb-da51-46dc-a4ec-b1ac00d8ff22\":32053,\"cb9d7075-6673-403f-84f5-a48af4b0ff9f\":2384,\"cc49caea-dc99-4919-9c3d-02ae7c29a3db\":20031,\"ef1576ad-db2d-4593-8307-0db1ceb86917\":20573}}",
								"isSummary": false,
								"previewData": {
									"filter": null,
									"table": {
										"rows": [],
										"schema": {}
									}
								},
								"isSql": false
							}
						},
						"source": [
							"unwanted_cols = {'_attachments','_etag','_rid','_self','_ts','collectionType','id'}\n",
							"\n",
							"# Remove unwanted columns from the columns collection\n",
							"cols = list(set(df.columns) - unwanted_cols)\n",
							"\n",
							"profiles = df.select(cols)\n",
							"\n",
							"display(profiles.limit(10))\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [],
									"values": [
										"userId"
									],
									"yLabel": "userId",
									"xLabel": "",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"userId\":{\"\":284637}}",
								"isSummary": false,
								"previewData": {
									"filter": null,
									"table": {
										"rows": [],
										"schema": {}
									}
								},
								"isSql": false
							}
						},
						"source": [
							"from pyspark.sql.functions import udf, explode\n",
							"\n",
							"preferredProductsFlat=profiles.select('userId',explode('preferredProducts').alias('productId'))\n",
							"productReviewsFlat=profiles.select('userId',explode('productReviews').alias('productReviews'))\n",
							"display(productReviewsFlat.limit(10))\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"productId"
									],
									"values": [
										"userId"
									],
									"yLabel": "userId",
									"xLabel": "productId",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"userId\":{\"374\":2,\"1808\":2,\"2864\":1,\"2900\":2,\"3286\":1,\"3397\":1,\"3687\":1,\"4151\":2,\"4450\":2,\"4953\":1}}",
								"isSummary": false,
								"previewData": {
									"filter": null,
									"table": {
										"rows": [],
										"schema": {}
									}
								},
								"isSql": false
							}
						},
						"source": [
							"productReviews = (productReviewsFlat.select('userId','productReviews.productId','productReviews.reviewText')\n",
							"    .orderBy('userId'))\n",
							"\n",
							"display(productReviews.limit(10))\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"diagram": {
								"activateDiagramType": 1,
								"chartConfig": {
									"category": "bar",
									"keys": [
										"productId"
									],
									"values": [
										"userId"
									],
									"yLabel": "userId",
									"xLabel": "productId",
									"aggregation": "SUM",
									"aggByBackend": false
								},
								"aggData": "{\"userId\":{\"54\":18314,\"118\":19202,\"174\":2662,\"210\":12869,\"236\":30854,\"319\":5014,\"321\":9505,\"375\":26687,\"389\":346,\"403\":6235,\"427\":26099,\"486\":21883,\"493\":22915,\"498\":20269,\"520\":11697,\"543\":12632,\"656\":1590,\"684\":518,\"734\":5389,\"770\":14883,\"957\":10302,\"989\":11546,\"1027\":23642,\"1183\":29507,\"1188\":30770,\"1229\":18882,\"1536\":20764,\"1627\":16338,\"1639\":549,\"1727\":33017,\"1838\":922,\"1851\":24607,\"1954\":2382,\"1964\":13794,\"2044\":3496,\"2048\":24773,\"2075\":21294,\"2078\":5316,\"2168\":28570,\"2183\":23756,\"2207\":32955,\"2221\":29060,\"2274\":27603,\"2297\":3892,\"2420\":20875,\"2453\":1550,\"2478\":929,\"2513\":9939,\"2613\":21933,\"2624\":3971,\"2638\":30316,\"2640\":8482,\"2665\":21822,\"2739\":4684,\"2765\":12075,\"2793\":23408,\"2809\":6435,\"2822\":27575,\"2828\":18355,\"2830\":13634,\"2853\":23655,\"3035\":3616,\"3048\":26447,\"3060\":16715,\"3114\":14892,\"3241\":24063,\"3298\":9117,\"3320\":6686,\"3342\":24725,\"3439\":22598,\"3441\":22496,\"3487\":6049,\"3544\":31273,\"3553\":13119,\"3586\":7761,\"3590\":21066,\"3595\":20950,\"3681\":12760,\"3854\":7520,\"3890\":22776,\"3988\":31992,\"4003\":2863,\"4020\":20647,\"4063\":1557,\"4155\":19442,\"4163\":2177,\"4255\":29396,\"4351\":25821,\"4427\":19645,\"4471\":29929,\"4477\":9935,\"4500\":19221,\"4603\":11948,\"4607\":17080,\"4622\":20681,\"4627\":20302,\"4677\":22196,\"4680\":22630,\"4831\":28581,\"4916\":31958}}",
								"isSummary": false,
								"previewData": {
									"filter": null,
									"table": {
										"rows": [],
										"schema": {}
									}
								},
								"isSql": false
							}
						},
						"source": [
							"preferredProductReviews = (preferredProductsFlat.join(productReviews,\n",
							"    (preferredProductsFlat.userId == productReviews.userId) &\n",
							"    (preferredProductsFlat.productId == productReviews.productId))\n",
							")\n",
							"\n",
							"display(preferredProductReviews.limit(100))\n",
							""
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"cellLanguage": "python",
							"tags": [
								"parameters"
							]
						},
						"source": [
							"import uuid\n",
							"\n",
							"# Generate random GUID\n",
							"runId = uuid.uuid4()\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"source": [
							"\n",
							"productReviews.write.parquet('abfss://wwi-02@asadatalakedp203xb.dfs.core.windows.net/ProductReviews/' + str(runId) + '.parquet')\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cosmos read')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool01",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/3600cd0c-0725-4a38-8ac6-e135b659c5c8/resourceGroups/dp203/providers/Microsoft.Synapse/workspaces/asaworkspacedp203xb/bigDataPools/SparkPool01",
						"name": "SparkPool01",
						"type": "Spark",
						"endpoint": "https://asaworkspacedp203xb.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# NOTE\n",
							"\n",
							"For Spark 3 Cosmos DB connector has slightly different configuration. Please select different snippest if a Spark 3.1 + pool is attached."
						]
					},
					{
						"cell_type": "code",
						"source": [
							"# Load a streaming Spark DataFrame from a Cosmos DB container\n",
							"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
							"\n",
							"# For Spark 2.4\n",
							"dfStream = spark.readStream\\\n",
							"    .format(\"cosmos.oltp\")\\\n",
							"    .option(\"spark.synapse.linkedService\", \"asacosmosdb01\")\\\n",
							"    .option(\"spark.cosmos.container\", \"OnlineUserProfile01\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.readEnabled\", \"true\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.startFromTheBeginning\", \"true\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.checkpointLocation\", \"/localReadCheckpointFolder\")\\\n",
							"    .option(\"spark.cosmos.changeFeed.queryName\", \"streamQuery\")\\\n",
							"    .load()\n",
							"\n",
							"# For Spark 3.1 +\n",
							"# dfStream = spark.readStream\\\n",
							"#     .format(\"cosmos.oltp.changeFeed\")\\\n",
							"#     .option(\"spark.synapse.linkedService\", \"asacosmosdb01\")\\\n",
							"#     .option(\"spark.cosmos.container\", \"OnlineUserProfile01\")\\\n",
							"#     .option(\"spark.cosmos.changeFeed.startFrom\", \"Beginning\")\\\n",
							"#     .option(\"spark.cosmos.changeFeed.mode\", \"Incremental\")\\\n",
							"#     .load()\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool01')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPool2')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}